@page "/dokter/dashboard"
@using System.Net.Http.Json
@using ProfiraClinic.Models.Core;
@using ProfiraClinicWeb.Services
@using ProfiraClinicWeb.Utils;
@using ProfiraClinicWeb.Data;
@using Microsoft.EntityFrameworkCore;
@inject CustomerApiService ApiService
@inject HttpClient httpClient

<MudCard Class="p-4 minh-100 rounded-3">
    <MudCard>
        <ProfiraClinicWeb.Components.Table.Table Config="PatientTableConfig" ClassOverride="bg-lightblue" WithAdd="false" />
    </MudCard>
</MudCard>

@inject AppDbContext dbContext
@code {
    private bool _hidePosition;
    private bool _loading;
    private string infoFormat = "Showing {first_item} to {last_item} of {all_items}";

    [CascadingParameter]
    public ProfiraClinicWeb.Components.Layout.MainLayout Layout { get; set; }

    protected override void OnInitialized()
    {
        Layout.ChangeTitleAndRoute("Dashboard", "");
        Layout.SetIsDoctor(true);
    }

    private List<Customer> Patients = new List<Customer>();

    public TableConfig PatientTableConfig { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try {
                var apiResponse = await ApiService.GetPatientsAsync();

                if (apiResponse.StatusCode == 0 && apiResponse.Data != null)
                {
                    Patients = apiResponse.Data.Items;
                }
                else
                {
                    // Handle API error case appropriately (e.g., display an error message)
                    // For example: show a notification, log the error etc.
                }

                System.Diagnostics.Debug.WriteLine("Parsing to table data");

                var dataSource = Patients.Select(el =>
                {
                    return (object)new { view = "/dokter/perawatan/" + el.KodeCustomer, edit = "/patient/" + el.KodeCustomer, memberId = el.KodeCustomer, namaPasien = el.NamaCustomer, alamat = el.AlamatDomisili, noHp = el.NomorHP, tglLahir = el.TanggalLahir };
                }
                ).ToList();

                PatientTableConfig = new TableConfig(new List<TableColumn> {
                    new TableColumn { Caption="Pilih", DataField="view", Type=ColumnType.View, CustomIcon="fa fa-hand-pointer" },
                    new TableColumn { Caption="Member ID", DataField="memberId" },
                    new TableColumn { Caption="Nama Pasien", DataField="namaPasien" },
                    new TableColumn { Caption="Alamat", DataField="alamat" },
                    new TableColumn { Caption="No. HP", DataField="noHp" },
                    new TableColumn { Caption="Tgl Lahir", DataField="tglLahir" },
                }, dataSource);
            }
                catch (Exception ex)
                {
                // Handle exceptions (e.g., network errors, deserialization issues, etc.)
                System.Diagnostics.Debug.WriteLine($"Error loading patients: {ex.Message}");
            }
            StateHasChanged();
        }
    }

    private int ChartIndex = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Sales", Data = new double[] { 4500, 5300, 6250, 7800, 9800, 15000 } },
    };
    public string[] XAxisLabels = { "January", "February", "March", "April", "May", "June" };

}

