@page "/login"
@layout ProfiraClinicWeb.Components.Layout.UnauthedLayout;
@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations;
@using ProfiraClinicWeb.Data;
@using ProfiraClinicWeb.Models;
@using Microsoft.EntityFrameworkCore;
@using Color = MudBlazor.Color;
@using BC = BCrypt.Net.BCrypt;

<PageTitle>Login</PageTitle>

<div class="bg-dark bg-opacity-25">
    <div class="d-flex align-items-center justify-content-center w-100 gap-8">
        <div class="d-flex justify-content-end">
            <MudImage Src="/images/ashley.png" Width="400" ObjectFit="ObjectFit.Cover"></MudImage>
        </div>
        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-items-center justify-content-center min-vh-100 flex-column gap-4 m-0">
            <MudImage Src="/images/logo.png" Class="profile-image" Width="150" Height="180"></MudImage>
            <MudPaper Class="pa-4 mb-8 d-flex flex-column justify-content-center align-items-center w-100 bg-white bg-opacity-75 rounded-3" Elevation="3" >
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Class="d-flex flex-column gap-3 w-100">
                    <MudTextField Style="border-radius: 20px; background-color: #F1F5F9;" DisableUnderLine="true" Variant="Variant.Filled" T="string" Label="Username" @ref="userNameField" @bind-Value="userName" />
                    <MudTextField Style="border-radius: 20px; background-color: #F1F5F9;" DisableUnderLine="true" Variant="Variant.Filled" T="string" Label="Password" Class="mt-3" InputType="@PasswordInput" @ref="pwField" @bind-Value="userPass" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonVisibilityClick" AdornmentAriaLabel="Show Password" />

                    <MudSelect OuterClass="bg-transparent rounded-pill" InputClass="bg-transparent" Style="border-radius: 20px; background-color: #F1F5F9;" DisableUnderLine="true" Variant="Variant.Filled" T="string" Label="Pilih clinic" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("Profira Manyar")" />
                        <MudSelectItem Value="@("Profira HR")" />
                    </MudSelect>
                    <MudCheckBox @bind-Value="@rememberMe" Dense="true">
                        Remember me
                    </MudCheckBox>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto rounded-3" FullWidth="true" OnClick="(() => OnSubmit())">Login</MudButton>
                </MudForm>
            </MudPaper>
        </MudContainer>
    </div>
</div>


@inject AppDbContext dbContext
@inject ISnackbar Snackbar
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavManager
@code {
    private List<DateTime> markedDates = new List<DateTime>();
    List<MKARY> customers = new List<MKARY>();

    bool success;
    bool rememberMe = false;
    string[] errors = { };
    MudTextField<string> pwField;
    MudTextField<string> userNameField;
    string userName = "";
    string userPass = "";
    string ktp = "";
    MudForm form;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonVisibilityClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    protected override async Task OnInitializedAsync()
    {
        customers = await dbContext.MKARY.ToListAsync();
    }

    private void addSnackbar(string message, Severity severity = Severity.Error)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add(message, severity);
    }

    public async Task OnSubmit()
    {
        var customer = await dbContext.MKARY.Where(c => c.UserName == userName).FirstOrDefaultAsync();
        if (customer == null)
        {
            addSnackbar("User not found");
            return;
        }
        if (!BC.Verify(userPass, customer.UserPassword))
        {
            addSnackbar("Invalid username or password");
            return;
        }

        var token = ProfiraClinicWeb.Utils.Auth.GenerateToken(customer.UserName);

        await ProtectedSessionStore.SetAsync("token", token);

        addSnackbar("Logged In", Severity.Success);

        NavManager.NavigateTo("/");
    }
}
