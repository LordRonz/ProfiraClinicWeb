@page "/treatment-item"
@using System.Net.Http.Json
@using ProfiraClinic.Models
@using ProfiraClinic.Models.Core
@using ProfiraClinicWeb.Utils
@using ProfiraClinicWeb.Services
@inject PerawatanHeaderApiService ApiService

<MudCard Class="p-4 h-100 rounded-3 overflow-scroll">
    <ProfiraClinicWeb.Components.Table.Table Config="PackageTableConfig" AddButtonText="Perawatan Baru" />
</MudCard>

@code {
    private string infoFormat = "Showing {first_item} to {last_item} of {all_items}";

    [CascadingParameter]
    public ProfiraClinicWeb.Components.Layout.MainLayout Layout { get; set; }

    // Configuration for the table. It will be set once the data is loaded.
    public TableConfig PackageTableConfig { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());

    // Holds the list of patients
    private List<PPerawatanH> Perawatans = new List<PPerawatanH>();

    // This method sets up the page title.
    protected override void OnInitialized()
    {
        Layout.ChangeTitleAndRoute("Item Perawatan", "Master / Perawatan");
    }

    // When the component is initialized, call the API service to retrieve patients.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("Loading pakets...");
                // Get the API response
                var apiResponse = await ApiService.GetTindakansAsync();
                // Check if status code indicates success
                System.Diagnostics.Debug.WriteLine("Done");
                if (apiResponse.StatusCode == 200 && apiResponse.Data != null)
                {
                    Perawatans = apiResponse.Data.Items;
                }
                else
                {
                    // Handle API error case appropriately (e.g., display an error message)
                    // For example: show a notification, log the error etc.
                }

                System.Diagnostics.Debug.WriteLine("Parsing to table data");

                var culture = new System.Globalization.CultureInfo("id-ID");

                // Prepare the table data source using the patient data retrieved from the API.
                var dataSource = Perawatans.Select(el =>
                    (object)new
                    {
                        view = $"treatment/{el.KodePerawatan}",
                        edit = $"treatment/{el.KodePerawatan}/edit",
                        kategoriRawat = el.KategoriPerawatan,
                        kodeGroupPerawatan = el.KodeGroupPerawatan,
                        jenisPerawatan = el.KodeJenis,
                        kodePerawatan = el.KodePerawatan,
                        namaPerawatan = el.NamaPerawatan,
                        harga = el.Harga.ToString("C", culture).Replace("Rp", ""),
                        discMember = ((int)el.DiscMember).ToString() + "%",
                        discNonMember = ((int)el.DiscNonMember).ToString() + "%",
                        point = el.Point,
                        aktif = el.Aktif == "1" ? "Ya" : "Tidak",
                    }
                ).ToList();

                PackageTableConfig = new TableConfig(
                    new List<TableColumn> {
                        new TableColumn { Caption = "Edit", DataField = "edit", Type = ColumnType.Edit },
                        new TableColumn { Caption = "Kategori Rawat", DataField = "kategoriRawat" },
                        new TableColumn { Caption = "Jenis Perawatan", DataField = "jenisPerawatan" },
                        new TableColumn { Caption = "Group", DataField = "kodeGroupPerawatan" },
                        new TableColumn { Caption = "Kode Perawatan", DataField = "kodePerawatan" },
                        new TableColumn { Caption = "Nama Perawatan", DataField = "namaPerawatan" },
                        new TableColumn { Caption = "Harga", DataField = "harga", Align = ColumnAlign.Right },
                        new TableColumn { Caption = "Disc Member", DataField = "discMember", Alignment = "right", Align = ColumnAlign.Right },
                        new TableColumn { Caption = "Disc Non Member", DataField = "discNonMember", Align = ColumnAlign.Right },
                        new TableColumn { Caption = "Point", DataField = "point" },
                        new TableColumn { Caption = "Aktif?", DataField = "aktif" },
                                    },
                    dataSource,
                    "/treatment/add"
                );
            }
            catch (Exception ex)
            {
                // Handle exceptions (e.g., network errors, deserialization issues, etc.)
                System.Diagnostics.Debug.WriteLine($"Error loading paket: {ex.Message}");
            }
            StateHasChanged();
        }
    }
}
