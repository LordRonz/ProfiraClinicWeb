@page "/pasien/{Kdcus}"
@using System.Net.Http.Json
@using ProfiraClinic.Models.Core
@using ProfiraClinicWeb.Models
@using ProfiraClinicWeb.Services
@using ProfiraClinicWeb.Utils;
@using ProfiraClinicWeb.Data;
@using Microsoft.EntityFrameworkCore;
@inject HttpClient httpClient
@inject CustomerApiService ApiService
@using Color = MudBlazor.Color

@if (customer != null)
{
<MudCard>
    <MudGrid Style="padding: 20px;">
        <MudItem xs="4">
            <MudCard Class="d-flex flex-column align-items-center h-100 w-100 justify-content-center">
                <MudImage src="/images/pasien.png" Class="rounded-circle" Width="160" Height="160"></MudImage>
                <MudText>@customer.NamaCustomer</MudText>
                <MudText>@customer.KodeCustomer</MudText>
            </MudCard>
        </MudItem>
        <MudItem xs="8">
            <MudCard Style="padding: 20px">
                <MudGrid>
                    <MudItem xs="6">
                        <MudText>Member Klinik</MudText>
                        <MudText>Jenis Kelamin</MudText>
                        <MudText>Alamat</MudText>
                        <MudText>No. Telepon/HP</MudText>
                        <MudText>Tanggal Lahir</MudText>
                        <MudText>Tanggal Registrasi</MudText>
                        <MudText>Transaksi Terakhir</MudText>
                        <MudText>Active</MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText>@customer.KodeLokasi</MudText>
                        <MudText>@getGender()</MudText>
                        <MudText>
                            @customer.AlamatDomisili
                        </MudText>
                        <MudText>@customer.NomorHP</MudText>
                        <MudText>@customer.TanggalLahir</MudText>
                        <MudText>@customer.TanggalRegistrasi</MudText>
                        <MudText>
                            @customer.UPDDT
                        </MudText>
                        <MudCheckBox Value="@isActive()" Dense="true" Disabled="true"></MudCheckBox>
                    </MudItem>
                </MudGrid>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Produk">
            <ProfiraClinicWeb.Components.Table.Table Config="ProdukTableConfig" />
        </MudTabPanel>
        <MudTabPanel Text="Perawatan">
            <ProfiraClinicWeb.Components.Table.Table Config="PerawatanTableConfig" />
        </MudTabPanel>
        <MudTabPanel Text="Paket">
            <ProfiraClinicWeb.Components.Table.Table Config="PaketTableConfig" />
        </MudTabPanel>
        <MudTabPanel Text="Sisa Paket">
            <ProfiraClinicWeb.Components.Table.Table Config="SisaPaketTableConfig" />
        </MudTabPanel>
        <MudTabPanel Text="Uang Muka">
            <ProfiraClinicWeb.Components.Table.Table Config="UangMukaTableConfig" />
        </MudTabPanel>
        <MudTabPanel Text="Piutang">
            <ProfiraClinicWeb.Components.Table.Table Config="PiutangTableConfig" />
        </MudTabPanel>
        <MudTabPanel Text="Pemakaian Paket">
            <ProfiraClinicWeb.Components.Table.Table Config="PerawatanTableConfig" />
        </MudTabPanel>
        <MudTabPanel Text="Rekam Medis">
            <ProfiraClinicWeb.Components.Table.Table Config="PerawatanTableConfig" />
        </MudTabPanel>
        <MudTabPanel Text="Penilaian">
            <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="ChartIndex" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
        </MudTabPanel>
    </MudTabs>
</MudCard>
}
else
{
    <MudContainer Class="d-flex justify-content-center align-items-center vh-100">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
    </MudContainer>
}

@inject AppDbContext dbContext
@code {
    private bool _hidePosition;
    private bool _loading;
    private IEnumerable<Element> Elements = new List<Element>();
    private string infoFormat = "Showing {first_item} to {last_item} of {all_items}";

    [CascadingParameter]
    public ProfiraClinicWeb.Components.Layout.MainLayout Layout { get; set; }

    protected override void OnInitialized()
    {
        Layout.ChangeTitleAndRoute("Pasien", "Detail Pasien");
    }

    [Parameter]
    public string Kdcus { get; set; }

    Customer customer = null;

    public TableConfig ProdukTableConfig { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());

    public TableConfig PerawatanTableConfig { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());

    public TableConfig PaketTableConfig { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());

    public TableConfig SisaPaketTableConfig { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());

    public TableConfig UangMukaTableConfig { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());

    public TableConfig PiutangTableConfig { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());

    string getGender() {
        return customer.JenisKelamin == "0" ? "Perempuan" : "Laki-laki";
    }

    bool isActive()
    {
        return customer.AKTIF == "1";
    }

    protected override async Task OnInitializedAsync()
    {
        var apiResponse = await ApiService.GetPatientByCodeAsync(Kdcus);
        // Check if status code indicates success
        System.Diagnostics.Debug.WriteLine("Done");
        if (apiResponse.StatusCode == 200 && apiResponse.Data != null)
        {
            customer = apiResponse.Data;
        }
        else
        {
            // Handle API error case appropriately (e.g., display an error message)
            // For example: show a notification, log the error etc.
        }


        Elements = new List<Element>()
        {
            new Element("Tess", 69, "waduh", 102),
            new Element("Tesss", 691, "waduhos", 101),
            new Element("Tessss", 694, "waduh", 103),
        };

        // var products1 = new List<object>()
        // {
        //     (object) new { klinik = "Profira Manyar", tgl = DateTime.Now, nomorFaktur="FT0001", namaProduk = "BC cream", qty = 1 },
        //     (object) new { klinik = "Profira Central", tgl = DateTime.Now, nomorFaktur="FT0001", namaProduk = "Cream malam", qty = 1 }
        // };

        var products = await dbContext.SpVPenjualanProduk.FromSqlInterpolated($"EXECUTE usp_VPenjualanProduk @KDCUS={customer.KodeCustomer}").ToArrayAsync();

        var productsDataSource = products.Select(el =>
        {
            return (object)new { klinik = el.KETLK, nomorFaktur = el.NOFAK, tgl = el.TGFAK, namaProduk = el.KDCUS, qty = el.NILPR };
        }
        ).ToList();

        ProdukTableConfig = new TableConfig(new List<TableColumn> {
                new TableColumn { Caption="Klinik", DataField="klinik" },
                new TableColumn { Caption="Tgl", DataField="tgl" },
                new TableColumn { Caption="No. Faktur", DataField="nomorFaktur" },
                new TableColumn { Caption="Nama Produk", DataField="namaProduk" },
                new TableColumn { Caption="Qty", DataField="qty" },
        }, productsDataSource);

        var perawatan = await dbContext.SpVPenjualanPerawatan.FromSqlInterpolated($"EXECUTE usp_VPenjualanPerawatan @KDCUS={customer.KodeCustomer}").ToArrayAsync();

        var perawatanDataSource = perawatan.Select(el =>
        {
            return (object)new { klinik = el.KETLK, nomorFaktur = el.NOKON, tgl = el.TGKON, namaTreatment = el.NMPER, qty = el.JUMLA, dokter = el.NMKAR };
        }
        ).ToList();

        PerawatanTableConfig = new TableConfig(new List<TableColumn> {
                new TableColumn { Caption="Klinik", DataField="klinik" },
                new TableColumn { Caption="Tgl", DataField="tgl" },
                new TableColumn { Caption="No. Faktur", DataField="nomorFaktur" },
                new TableColumn { Caption="Nama Treatment", DataField="namaTreatment" },
                new TableColumn { Caption="Qty", DataField="qty" },
                new TableColumn { Caption="Dokter", DataField="dokter" },
        }, perawatanDataSource);


        var paket = await dbContext.SpVPenjualanPaket.FromSqlInterpolated($"EXECUTE usp_VPenjualanPaket @KDCUS={customer.KodeCustomer}").ToArrayAsync();

        var paketDataSource = paket.Select(el =>
        {
            return (object)new { klinik = el.KETLK, tgl = el.TGFAK, nomorFaktur = el.NOFAK, namaPaket = el.NMPKT, qty = el.JUMLA, expDate = DateTime.Now };
        }
        ).ToList();

        PaketTableConfig = new TableConfig(new List<TableColumn> {
                new TableColumn { Caption="Klinik", DataField="klinik" },
                new TableColumn { Caption="Tgl", DataField="tgl" },
                new TableColumn { Caption="No. Faktur", DataField="nomorFaktur" },
                new TableColumn { Caption="Nama Paket", DataField="namaPaket" },
                new TableColumn { Caption="Qty", DataField="qty" },
                new TableColumn { Caption="Exp Date", DataField="expDate" },
        }, paketDataSource);

        var sisaPaket = new List<object>()
        {
            (object) new { klinik = "Profira Manyar", nomorFaktur="PK001", namaPaket = "Pico Laser", namaPerawatan = "Pico Laser", freq = 3, pemakaian = 2, sisa = 1, expDate = DateTime.Now },
            (object) new { klinik = "Profira Central", nomorFaktur="PK002", namaPaket = "Peeling", namaPerawatan = "Peeling", freq = 5, pemakaian = 2, sisa = 3, expDate = DateTime.Now }
        };

        SisaPaketTableConfig = new TableConfig(new List<TableColumn> {
                new TableColumn { Caption="Klinik", DataField="klinik" },
                new TableColumn { Caption="No. Faktur", DataField="nomorFaktur" },
                new TableColumn { Caption="Nama Paket", DataField="namaPaket" },
                new TableColumn { Caption="Nama Perawatan", DataField="namaPerawatan" },
                new TableColumn { Caption="Frekuensi", DataField="freq" },
                new TableColumn { Caption="Pemakaian", DataField="pemakaian" },
                new TableColumn { Caption="Sisa", DataField="sisa" },
                new TableColumn { Caption="Exp Date", DataField="expDate" },
        }, sisaPaket);

        var uangMuka = new List<object>()
        {
            (object) new { klinik = "Profira Manyar", tglFaktur = DateTime.Now, nomorFaktur="PK001", uangMuka = "IDR 10.000.000", pakai = "IDR 5.000.000", sisa = "IDR 5.000.000" },
            (object) new { klinik = "Profira Central", tglFaktur = DateTime.Now, nomorFaktur="PK002", uangMuka = "IDR 9.500.000", pakai = "IDR 3.000.000", sisa = "IDR 6.500.000" }
        };

        UangMukaTableConfig = new TableConfig(new List<TableColumn> {
                new TableColumn { Caption="Klinik", DataField="klinik" },
                new TableColumn { Caption="Tgl. Faktur", DataField="tglFaktur" },
                new TableColumn { Caption="No. Faktur", DataField="nomorFaktur" },
                new TableColumn { Caption="Nilai Uang Muka", DataField="uangMuka" },
                new TableColumn { Caption="Nilai Pakai", DataField="pakai" },
                new TableColumn { Caption="Sisa", DataField="sisa" },
        }, uangMuka);

        var piutang = await dbContext.SpVSaldoPiutang.FromSqlInterpolated($"EXECUTE usp_VSaldoPiutang @KDCUS={customer.KodeCustomer}").ToArrayAsync();

        var piutangDataSource = piutang.Select(el =>
        {
            return (object)new { klinik = el.KETLK, tglFaktur = el.TGFAK, nomorFaktur = el.NOFAK, piutang = el.NILAI, bayar = el.NILBY, sisa = el.SISA };
        }
        ).ToList();

        PiutangTableConfig = new TableConfig(new List<TableColumn> {
                new TableColumn { Caption="Klinik", DataField="klinik" },
                new TableColumn { Caption="Tgl. Faktur", DataField="tglFaktur" },
                new TableColumn { Caption="No. Faktur", DataField="nomorFaktur" },
                new TableColumn { Caption="Nilai Piutang", DataField="piutang" },
                new TableColumn { Caption="Nilai Bayar", DataField="bayar" },
                new TableColumn { Caption="Sisa", DataField="sisa" },
        }, piutangDataSource);
    }

    private int ChartIndex = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Sales", Data = new double[] { 4500, 5300, 6250, 7800, 9800, 15000 } },
    };
    public string[] XAxisLabels = { "January", "February", "March", "April", "May", "June" };

}
