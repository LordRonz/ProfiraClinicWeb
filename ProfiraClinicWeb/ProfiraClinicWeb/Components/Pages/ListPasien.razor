@page "/list-pasien"
@using System.Net.Http.Json
@using ProfiraClinic.Models.Core
@using ProfiraClinicWeb.Helpers
@using ProfiraClinicWeb.Utils
@using ProfiraClinicWeb.Services
@inject CustomerApiService ApiService

<MudCard Class="p-4 h-100 rounded-3 overflow-scroll">
    <ProfiraClinicWeb.Components.Table.Table Config="PatientTableConfig"
                                             AddButtonText="Pasien Baru"
                                             UseServerData
                                             ServerDataFunc="LoadPatientsAsync" />
</MudCard>

@code {
    private string infoFormat = "Showing {first_item} to {last_item} of {all_items}";

    [CascadingParameter]
    public ProfiraClinicWeb.Components.Layout.MainLayout Layout { get; set; }

    // Configuration for the table. It will be set once the data is loaded.
    public TableConfig PatientTableConfig { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());

    // Holds the list of patients
    private List<Customer> Patients = new List<Customer>();

    // When the component is initialized, call the API service to retrieve patients.
    protected override void OnInitialized()
    {
        Layout.ChangeTitleAndRoute("Pasien", "List Pasien");

        PatientTableConfig = new TableConfig(
            // columns
            new List<TableColumn>
            {
                new TableColumn { Caption="View",           DataField="view",      Type=ColumnType.View    },
                new TableColumn { Caption="Edit",           DataField="edit",      Type=ColumnType.Edit    },
                new TableColumn { Caption="Kode Customer",  DataField="memberId"                        },
                new TableColumn { Caption="Nama Pasien",    DataField="namaPasien"                      },
                new TableColumn { Caption="Alamat",         DataField="alamat"                         },
                new TableColumn { Caption="No. HP",         DataField="noHp"                           },
                new TableColumn { Caption="Tgl Lahir",      DataField="tglLahir"                       },
                new TableColumn { Caption="Aktif?",         DataField="aktif"                          },
            },
            // no local data needed in server mode
            dataSource: new List<object>(),
            addRoute: "/pasien/add"
        );
    }

    private Task<ApiResponse<PagedResult<Dictionary<string, string>>>> LoadPatientsAsync(
        int page,
        int pageSize,
        string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return ApiService.GetPatientsAsync(page, pageSize)
                   .ContinueWith(t =>
                       new ApiResponse<PagedResult<Dictionary<string, string>>>(
                           t.Result.StatusCode,
                           t.Result.Message,
                           // map Customer -> Dictionary<string,string>
                           new PagedResult<Dictionary<string, string>>
                           {
                               TotalCount = t.Result.Data.TotalCount,
                               Page = t.Result.Data.Page,
                               PageSize = t.Result.Data.PageSize,
                               TotalPages = t.Result.Data.TotalPages,
                               Items = t.Result.Data.Items.Select(el => ToDict(el)).ToList()
                           }
                       )
                   );
        else
            return ApiService.SearchPatientsAsync(searchTerm, page, pageSize)
                   .ContinueWith(t =>
                       new ApiResponse<PagedResult<Dictionary<string, string>>>(
                           t.Result.StatusCode,
                           t.Result.Message,
                           new PagedResult<Dictionary<string, string>>
                           {
                               TotalCount = t.Result.Data.TotalCount,
                               Page = t.Result.Data.Page,
                               PageSize = t.Result.Data.PageSize,
                               TotalPages = t.Result.Data.TotalPages,
                               Items = t.Result.Data.Items.Select(el => ToDict(el)).ToList()
                           }
                       )
                   );
    }

    // helper to convert your Customer into the Dictionary<string,string> shape your table expects
    private Dictionary<string, string> ToDict(Customer el) =>
        new Dictionary<string, string>
        {
            ["view"] = $"pasien/{el.KodeCustomer}",
            ["edit"] = $"pasien/{el.KodeCustomer}/edit",
            ["memberId"] = el.KodeCustomer,
            ["namaPasien"] = el.NamaCustomer,
            ["alamat"] = el.AlamatDomisili,
            ["noHp"] = el.NomorHP,
            ["tglLahir"] = el.TanggalLahir?.ToString("dd/MM/yyyy") ?? "",
            ["aktif"] = el.AKTIF == "1" ? "Ya" : "Tidak"
        };

    private int ChartIndex = -1; // default value cannot be 0 -> first selected index is 0.

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Sales", Data = new double[] { 4500, 5300, 6250, 7800, 9800, 15000 } },
    };
    public string[] XAxisLabels = { "January", "February", "March", "April", "May", "June" };
}
