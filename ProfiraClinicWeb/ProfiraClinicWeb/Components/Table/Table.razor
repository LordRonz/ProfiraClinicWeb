@using ProfiraClinicWeb.Helpers
@using ProfiraClinicWeb.Utils;
@using System.Linq;
@using static MudBlazor.CategoryTypes

@if (WithAdd == true)
{
    <div class="d-flex justify-content-end mb-2">
        <MudButton Size="MudBlazor.Size.Small" StartIcon="fa fa-plus" IconSize="@MudBlazor.Size.Small" Href="@Config.GetAddRoute()" Class="add-btn mt-2">@AddButtonText</MudButton>
    </div>
}
<div class="mb-5">
    <MudCard Class="rounded-3">
        <MudStack Spacing="1" Class="w-100 table-header pb-4">
            <MudButton OnClick="OnExpandCollapseClick" FullWidth="true" Class="w-100 filter-btn">Filter <MudIcon Icon="@(_expanded? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Title="Arrow" /> </MudButton>
            <MudCollapse Expanded="_expanded" Class="px-4">
                <div class="d-flex justify-content-start align-items-start gap-4">
                    @* <MudSelect ShrinkLabel MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" SelectAll @bind-Value="value" @bind-SelectedValues="options" OuterClass="flex-grow-0" MultiSelection T="string" Style="border-radius: 20px; background-color: #FFF; max-width: 300px; min-width: 200px;" Label="Filter by" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" DisableUnderLine Class="mt-4 filter-field flex-shrink-1 flex-grow-0">
                        @foreach (TableColumn col in _columns)
                        {
                            @if (col.Type == ColumnType.Data)
                            {
                                <MudSelectItem Style="height: 30px" T="string" Value="@col.DataField">@col.Caption</MudSelectItem>
                            }
                        }
                    </MudSelect> *@
                    @if (!UseServerData || ServerDataFunc == null)
                    {
                        <MudTextField Placeholder="Search..." ShrinkLabel Style="border-radius: 20px; background-color: #FFF; max-width: 400px; min-width: 300px;" Margin="Margin.Dense" DisableUnderLine Variant="Variant.Outlined" @ref="tableFilterRef" @bind-Value="searchString1" Class="mt-4 filter-field flex-shrink-1 flex-grow-0" Clearable Immediate></MudTextField>
                    }
                    else
                    {
                        <MudTextField Placeholder="Search..." DebounceInterval="2000" T="string" ValueChanged="OnSearchChanged" ShrinkLabel Style="border-radius: 20px; background-color: #FFF; max-width: 400px; min-width: 300px;" Margin="Margin.Dense" DisableUnderLine Variant="Variant.Outlined" @ref="tableFilterRef" Value="searchString1" Class="mt-4 filter-field flex-shrink-1 flex-grow-0" Clearable Immediate></MudTextField>
                    }
                </div>
            </MudCollapse>
        </MudStack>
    </MudCard>
</div>
@if (!UseServerData || ServerDataFunc == null)
{
    <MudTable HeaderClass="@GetHeaderClass()"
              Striped Bordered
              Items="_displayData"
              Dense Hover Breakpoint="Breakpoint.Sm"
              Loading="@_loading"
              LoadingProgressColor="MudBlazor.Color.Info"
              Filter="_filterPredicate"
              @ref="table">
        <ColGroup>
            @foreach (TableColumn col in _columns)
            {
                // Pass the Dto properties to the component
                @switch (col.Type)
                {
                    case ColumnType.Data:
                        <col />
                        break;
                    case ColumnType.Edit:
                    case ColumnType.View:
                    case ColumnType.Delete:
                        <col style="width:50px;" />
                        break;
                    case null:
                        <col />
                        break;
                }
            }
        </ColGroup>
        <HeaderContent>
            @foreach (TableColumn col in _columns)
            {
                if (col.Type == ColumnType.Data)
                {
                    <MudTh Class="fw-bold border-header-table sort-header"
                           @onclick="(() => ToggleSort(col.DataField))">
                        <span>@col.Caption</span>
                        @if (_sortColumn == col.DataField)
                        {
                            <MudIcon Size="MudBlazor.Size.Small"
                                     Class="ms-1"
                                     Icon="@(_sortDir == SortDir.Desc
                                                                             ? Icons.Material.Filled.ArrowDownward
                                                                             : Icons.Material.Filled.ArrowUpward)" />
                        }
                    </MudTh>
                }
                else
                {
                    <MudTh Class="fw-bold border-header-table">@col.Caption</MudTh>
                }
            }
        </HeaderContent>
        <RowTemplate>
            @foreach (TableColumn col in _columns)
            {
                @* Use CSS classes for cell alignment since MudTd doesn’t support Align param *@
                var cellClass = col.Align switch
                {
                    ColumnAlign.Right => "text-end",
                    ColumnAlign.Center => "text-center",
                    _ => ""
                };
                <MudTd DataLabel="@col.Caption" Class="@cellClass">
                    @switch (col.Type)
                    {
                        case ColumnType.Data:
                            @context.GetValueOrDefault(col.DataField)
                            break;
                        case ColumnType.Edit:
                            <MudFab DisableElevation Size="MudBlazor.Size.Small" IconSize="MudBlazor.Size.Small" Color="@(col.Color ?? MudBlazor.Color.Transparent)" Style="color: rgba(111, 74, 2, 1); background-color: transparent; height: 20px !important; min-height: 20px;" DropShadow="false" StartIcon="@(col.CustomIcon ?? Icons.Material.Filled.Edit)" Href="@context.GetValueOrDefault(col.DataField)" />
                            break;
                        case ColumnType.View:
                            <MudFab DisableElevation Size="MudBlazor.Size.Small" IconSize="MudBlazor.Size.Small" Color="@(col.Color ?? MudBlazor.Color.Transparent)" Style="color: rgba(111, 74, 2, 1); background-color: transparent; height: 20px !important; min-height: 20px;" DropShadow="false" StartIcon="@(col.CustomIcon ?? Icons.Material.Filled.RemoveRedEye)" Href="@context.GetValueOrDefault(col.DataField)" />
                            break;
                        case ColumnType.Delete:
                            {
                                var keyField = col.ActionField ?? col.DataField;
                                var keyVal = context.GetValueOrDefault(keyField);
                                <MudFab DisableElevation Size="MudBlazor.Size.Small"
                                        IconSize="MudBlazor.Size.Small"
                                        Color="@(col.Color ?? MudBlazor.Color.Transparent)"
                                        Style="color: #f00; background-color: transparent; height: 20px !important; min-height: 20px;"
                                        DropShadow="false"
                                        StartIcon="@(col.CustomIcon ?? Icons.Material.Filled.DeleteForever)"
                                        OnClick="@(() => OnDeleteClicked(keyField, keyVal, col.Action))" />
                                break;
                            }
                        default:
                            @context.GetValueOrDefault(col.DataField)
                            break;
                    }
                </MudTd>
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 5, 10, 15, 25, 50, 100, int.MaxValue }" InfoFormat="@infoFormat" HorizontalAlignment="MudBlazor.HorizontalAlignment.Center" />
        </PagerContent>
    </MudTable>
}
else
{
    <MudTable HeaderClass="@GetHeaderClass()" ServerData="LoadServerData" Striped Bordered Dense Hover Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="MudBlazor.Color.Info" @ref="table">
        <ColGroup>
            @foreach (TableColumn col in _columns)
            {
                // Pass the Dto properties to the component
                @switch (col.Type)
                {
                    case ColumnType.Data:
                        <col />
                        break;
                    case ColumnType.Edit:
                    case ColumnType.View:
                    case ColumnType.Delete:
                        <col style="width:50px;" />
                        break;
                    case null:
                        <col />
                        break;
                }
            }
        </ColGroup>
        <HeaderContent>
            @foreach (TableColumn col in _columns)
            {
                if (col.Type == ColumnType.Data)
                {
                    <MudTh Class="fw-bold border-header-table sort-header"
                           @onclick="(() => ToggleSortAndReload(col.DataField))">
                        <span>@col.Caption</span>
                        @if (_sortColumn == col.DataField && _sortDir != SortDir.None)
                        {
                            <MudIcon Size="MudBlazor.Size.Small"
                                     Class="ms-1"
                                     Icon="@(_sortDir == SortDir.Desc
                                                                             ? Icons.Material.Filled.ArrowDownward
                                                                             : Icons.Material.Filled.ArrowUpward)" />
                        }
                    </MudTh>
                }
                else
                {
                    <MudTh Class="fw-bold border-header-table">@col.Caption</MudTh>
                }
            }
        </HeaderContent>

        <RowTemplate>
            @foreach (TableColumn col in _columns)
            {
                @* Use CSS classes for cell alignment since MudTd doesn’t support Align param *@
                var cellClass = col.Align switch
                {
                    ColumnAlign.Right => "text-end",
                    ColumnAlign.Center => "text-center",
                    _ => ""
                };
                <MudTd DataLabel="@col.Caption" Class="@cellClass">
                    @switch (col.Type)
                    {
                        case ColumnType.Data:
                            @context.GetValueOrDefault(col.DataField)
                            break;
                        case ColumnType.Edit:
                            <MudFab DisableElevation Size="MudBlazor.Size.Small" IconSize="MudBlazor.Size.Small" Color="@(col.Color ?? MudBlazor.Color.Transparent)" Style="color: rgba(111, 74, 2, 1); background-color: transparent; height: 20px !important; min-height: 20px;" DropShadow="false" StartIcon="@(col.CustomIcon ?? Icons.Material.Filled.Edit)" Href="@context.GetValueOrDefault(col.DataField)" />
                            break;
                        case ColumnType.View:
                            <MudFab DisableElevation Size="MudBlazor.Size.Small" IconSize="MudBlazor.Size.Small" Color="@(col.Color ?? MudBlazor.Color.Transparent)" Style="color: rgba(111, 74, 2, 1); background-color: transparent; height: 20px !important; min-height: 20px;" DropShadow="false" StartIcon="@(col.CustomIcon ?? Icons.Material.Filled.RemoveRedEye)" Href="@context.GetValueOrDefault(col.DataField)" />
                            break;
                        case ColumnType.Delete:
                            {
                                var keyField = col.ActionField ?? col.DataField;
                                var keyVal = context.GetValueOrDefault(keyField);
                                <MudFab DisableElevation Size="MudBlazor.Size.Small"
                                        IconSize="MudBlazor.Size.Small"
                                        Color="@(col.Color ?? MudBlazor.Color.Transparent)"
                                        Style="color: #f00; background-color: transparent; height: 20px !important; min-height: 20px;"
                                        DropShadow="false"
                                        StartIcon="@(col.CustomIcon ?? Icons.Material.Filled.DeleteForever)"
                                        OnClick="@(() => OnDeleteClicked(keyField, keyVal, col.Action))" />
                                break;
                            }
                        default:
                            @context.GetValueOrDefault(col.DataField)
                            break;
                    }
                </MudTd>
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 5, 10, 15, 25, 50, 100, int.MaxValue }" InfoFormat="@infoFormat" HorizontalAlignment="MudBlazor.HorizontalAlignment.Center" />
        </PagerContent>
    </MudTable>
}

@code {
    private bool _loading;
    private string infoFormat = "Showing {first_item} to {last_item} of {all_items}";

    private string searchString1 = "";

    private MudTable<Dictionary<string, string>> table;
    private MudTextField<string> tableFilterRef;

    private List<Dictionary<string, string>> _data = [];

    bool _expanded = true;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    private IEnumerable<string> options { get; set; } = [];

    private string value { get; set; } = "Nothing selected";

    private Func<Dictionary<string, string>, bool>? _filterPredicate;

    private TableConfig? _prevConfigRef;

    [Parameter] public bool UseServerData { get; set; } = false;

    [Parameter]
    public TableConfig Config { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());
    [Parameter]
    public string? ClassOverride { get; set; }
    [Parameter]
    public Func<int, int, string, string?, string?, Task<ApiResponse<PagedResult<Dictionary<string, string>>>>>? ServerDataFunc { get; set; }

    [Parameter]
    public bool? WithAdd { get; set; } = true;

    [Parameter]
    public string? AddButtonText { get; set; } = "Tambah";

    private bool FilterFunc1(Dictionary<string, string> element) => FilterFunc(element, searchString1.ToLower().Trim());

    private List<TableColumn> _columns = new();

    private enum SortDir { None, Desc, Asc }

    private string? _sortColumn;
    private SortDir _sortDir = SortDir.None;

    private List<Dictionary<string, string>> _displayData = [];

    private void UpdateDisplayData()
    {
        if (_sortDir == SortDir.None || string.IsNullOrWhiteSpace(_sortColumn))
        {
            _displayData = _data.ToList();
            return;
        }

        int CompareVals(Dictionary<string, string> a, Dictionary<string, string> b)
        {
            var av = a.GetValueOrDefault(_sortColumn!) ?? string.Empty;
            var bv = b.GetValueOrDefault(_sortColumn!) ?? string.Empty;

            if (decimal.TryParse(av, out var an) && decimal.TryParse(bv, out var bn))
                return an.CompareTo(bn);

            if (DateTime.TryParse(av, out var ad) && DateTime.TryParse(bv, out var bd))
                return ad.CompareTo(bd);

            return string.Compare(av, bv, StringComparison.OrdinalIgnoreCase);
        }

        var list = _data.ToList();
        list.Sort((a, b) => _sortDir == SortDir.Desc ? -CompareVals(a, b) : CompareVals(a, b));
        _displayData = list;
    }

    private void ToggleSort(string dataField)
    {
        if (!string.Equals(_sortColumn, dataField, StringComparison.Ordinal))
        {
            _sortColumn = dataField;
            _sortDir = SortDir.Desc;           // first click = DESC
        }
        else
        {
            _sortDir = _sortDir switch          // cycle: DESC -> ASC -> None -> DESC ...
            {
                SortDir.Desc => SortDir.Asc,
                SortDir.Asc => SortDir.None,
                _ => SortDir.Desc
            };
            if (_sortDir == SortDir.None) _sortColumn = null;
        }

        UpdateDisplayData();
        StateHasChanged();
    }

    private void ToggleSortAndReload(string dataField)
    {
        if (!string.Equals(_sortColumn, dataField, StringComparison.Ordinal))
        {
            _sortColumn = dataField;
            _sortDir = SortDir.Desc;
        }
        else
        {
            _sortDir = _sortDir switch
            {
                SortDir.Desc => SortDir.Asc,
                SortDir.Asc => SortDir.None,
                _ => SortDir.Desc
            };
            if (_sortDir == SortDir.None) _sortColumn = null;
        }

        if (UseServerData && ServerDataFunc != null)
        {
            _ = table?.ReloadServerData();
        }
        StateHasChanged();
    }



    protected override void OnParametersSet()
    {
        if (!ReferenceEquals(_prevConfigRef, Config))
        {
            _prevConfigRef = Config;

            _columns = Config.GetColumn().ToList();

            // Pin Items to a stable reference; if GetData() returns a new list each time,
            // lift it in the PARENT so the reference is stable, or snapshot it once here:
            _data = Config.GetData();
            options = Config.GetColumn()
                .Select(p => p.DataField)
                .ToHashSet();

            _filterPredicate = FilterFunc1;

            UpdateDisplayData();
        }
    }

    string GetHeaderClass()
    {
        var defaultClass = "table-head-bordered bg-pastel-sky" + (ClassOverride ?? "");
        return defaultClass;
    }

    protected override void OnInitialized()
    {
        _filterPredicate = FilterFunc1;
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        Config.ReplaceFilter(selectedValues);

        var count = selectedValues.Count;

        return $"{string.Join(", ", selectedValues.Select(x => x))}" + (count <= 1 ? "   " : "");
    }

    private bool FilterFunc(Dictionary<string, string> element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        var filters = Config.GetFilters();

        if (filters == null || !filters.Any())
        {
            foreach (var kv in element)
            {
                if (!string.IsNullOrEmpty(kv.Value) &&
                    kv.Value.IndexOf(searchString, StringComparison.OrdinalIgnoreCase) >= 0)
                    return true;
            }
            return false;
        }

        var includeCols = new HashSet<string>(
            filters.Where(f => f != null).Select(f => f.Column),
            StringComparer.OrdinalIgnoreCase
        );

        foreach (var kv in element)
        {
            if (includeCols.Contains(kv.Key) &&
                !string.IsNullOrEmpty(kv.Value) &&
                kv.Value.IndexOf(searchString, StringComparison.OrdinalIgnoreCase) >= 0)
                return true;
        }

        return false;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var columns = Config.GetColumn().Select(p => p.DataField);
            options = Config.GetColumn()
                .Select(p => p.DataField)
                .ToHashSet();
            StateHasChanged();
        }
    }

    private async Task<TableData<Dictionary<string, string>>> LoadServerData(TableState state, CancellationToken token)
    {
        var dir = _sortDir == SortDir.None ? null
                 : _sortDir == SortDir.Desc ? "desc" : "asc";
        System.Diagnostics.Debug.WriteLine(searchString1);
        var resp = await ServerDataFunc!(
            state.Page + 1,
            state.PageSize,
            searchString1,
            _sortColumn,
            dir
        );

        return new TableData<Dictionary<string, string>>
        {
            TotalItems = resp.Data?.TotalCount ?? 0,
            Items = resp.Data?.Items ?? new List<Dictionary<string, string>>()
        };
    }


    private void OnSearchChanged(string value)
    {
        searchString1 = value ?? string.Empty;
        ReloadAsync();
    }

    private async Task ReloadAsync()
    {
        try
        {

            await InvokeAsync(() => table?.ReloadServerData());
            StateHasChanged();
        }
        catch (TaskCanceledException) { /* ignored */ }
    }

    private void RemoveRowByKey(string keyField, string? keyVal)
    {
        if (string.IsNullOrEmpty(keyVal)) return;

        // remove in-memory, create a new list to change reference for MudTable
        _data = _data.Where(r =>
            !string.Equals(r.GetValueOrDefault(keyField), keyVal, StringComparison.Ordinal)
        ).ToList();

        UpdateDisplayData();
    }

    private async Task OnDeleteClicked(string keyField, string? keyVal, Func<string?, Task<bool>>? serverAction)
    {
        var before = _data;
        if (serverAction != null)
        {
            var ok = await serverAction(keyVal);

            RemoveRowByKey(keyField, keyVal);
            StateHasChanged();
            if (!ok) { _data = before; StateHasChanged(); }
        }
    }

}


<style>
    .sort-header {
        cursor: pointer;
        user-select: none;
        white-space: nowrap;
    }

        .sort-header .mud-icon-root {
            vertical-align: middle;
        }


    .bg-blue {
        background-color: rgba(1, 73, 191, 1);
    }

    .bg-lightblue {
        background-color: rgba(192, 225, 255, 1);
    }

    .mud-table-toolbar {
        overflow: auto !important;
        height: max-content;
        padding: 0px;
    }

    .filter-btn {
        background: rgba(162, 238, 240, 0.4);
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
    }

        .filter-btn > .mud-button-label {
            text-align: left;
            justify-content: start;
            padding-left: 10px;
        }

    .search-btn {
        background: rgba(59, 113, 251, 1);
        color: white;
        text-transform: none;
    }

        .search-btn:hover {
            background: rgba(39, 83, 201, 1);
        }

    .add-btn {
        background: rgba(47, 193, 71, 1);
        color: white;
        margin-top: -12px !important;
        text-transform: none;
    }

        .add-btn:hover {
            background: rgba(27, 153, 41, 1);
        }

    .mud-table {
    }

    .table-header .mud-input-root {
        height: 30px !important;
        padding: 0px 10px !important;
        font-size: 12px !important;
    }

    .table-header .mud-input-label {
        font-size: 14px !important;
        line-height: 14px !important;
    }

    .table-header .mud-input-label-filled.mud-input-label-margin-dense {
        transform: translate(12px, 20px) scale(1);
    }

    .table-header .mud-input-label-inputcontrol {
        top: -3px;
    }

    .filter-field .mud-input-outlined-border {
        border-radius: 20px !important;
    }
</style>
