@page "/dashboard"
@inherits BasePage

@using System.Net.Http.Json
@using Microsoft.EntityFrameworkCore
@using ProfiraClinic.Models.Api
@using ProfiraClinicRME.Application
@using ProfiraClinicRME.Components.Layout
@using ProfiraClinicRME.Components.Section
@using ProfiraClinicRME.Components.Table
@using ProfiraClinicRME.Helpers
@using ProfiraClinicRME.Infra
@using ProfiraClinicRME.Model
@using ProfiraClinicRME.Utils

@inject ISessionManager SesMan
@inject IUserService SvcUser
@inject NavigationManager Nav
@inject IAppointmentService SvcAppointment
@inject IDokterService SvcDokter

<TopbarUser Route="Dasboard"
            Title="@_title" />

<MudCard Class="pa-4 h-100 rounded-lg overflow-scroll">

    @if (_kodeJabatan != "DR")
    {
        <MudCardHeader>
            <MudGrid>
                <MudItem xs="6" md="3" Class="pa-1">

                    <MudSelect T="DokterListDto"
                               Value="@_selectedDokter"
                               ValueChanged="@HandleDokterChanged"

                               Variant="Variant.Outlined"
                               Label="Pilih dokter ..."
                               AnchorOrigin="Origin.BottomCenter">
                        @foreach (var dokter in _listDokter)
                        {
                            <MudSelectItem T="DokterListDto" Value="@dokter">@dokter.NamaDokter</MudSelectItem>
                        }

                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudCardHeader>
    }
    <Table WithAdd="false" WithFilter="false" WithPaging="false" Config="_appointmentTblConf" />
</MudCard>

@code {
    [CascadingParameter(Name = "CurrentUser")]
    public CurrentUser CurrentUser { get; set; }

    public TableConfig _appointmentTblConf { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());

    private string _kodeJabatan = "";

    private string _selectedKodeKaryawan = "";

    private DokterListDto? _selectedDokter = null;

    private List<DokterListDto> _listDokter = [];

    private List<TRMAppointment> _listAppointment;
    private string _title = "Appointment list on ";

    public Dashboard()
    {
        _classPath = "App::Page::Dashboard";
        LogTrace.Info("class init", path: _classPath);

        _listAppointment = [];

    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (CurrentUser is null || CurrentUser?.Klinik is null)
        {
            var msg = "Current user data not valid.";
            LogTrace.Error(msg);
            throw new Exception(msg);
        }
        LogTrace.Info("current user", CurrentUser, _classPath);

        _title += CurrentUser.Klinik.KETLK;
        _kodeJabatan = CurrentUser.KodeJabatan ?? "DR";
        // _kodeJabatan = "TR";



        //load table for dokter, or list dokter for other
        var kodeKaryawan = CurrentUser.Karyawan?.KodeKaryawan
                        ?? throw new AppException("Data pengguna tidak valid.");
        if (_kodeJabatan == "DR")
        {
            await LoadTable(kodeKaryawan);
        }
        else
        {
            var resDokter = await SvcDokter.GetListAsync();
            if (resDokter.Status == ServiceResultEnum.FOUND)
            {
                _listDokter = resDokter!.Data!.Items;
                // _selectedDokter = _listDokter.First();

            }
            else
            {
                addSnackbar("Gagal memuat data dokter.", Severity.Error);
                LogTrace.Error("Gagal memuat data dokter", resDokter, _classPath);
            }

        }
    }

    private async Task HandleDokterChanged(DokterListDto dokter)
    {
        LogTrace.Info("dokter changed", dokter, _classPath);
        _selectedDokter = dokter;
        await LoadTable(dokter.KodeKaryawan);
    }

    private async Task LoadTable(string kodeKaryawan)
    {

        //load appointment table
        var resApo = await SvcAppointment.GetListOnWaitAsync(CurrentUser.KodeLokasi ?? "", DateTime.Today, kodeKaryawan);

        if (resApo.Status == ServiceResultEnum.FOUND)
        {

            _listAppointment = resApo.Data.Items;
            List<object> tableData = [];
            var dataRow = new object();
            foreach (var item in _listAppointment)
            {
                dataRow = (object)new
                {
                    view = "/Perawatan/" + item.IDAppointment,
                    IDAppointment = item.IDAppointment,
                    MemberID = item.KodeCustomer ?? "",
                    NamaPasien = item.NamaCustomer ?? "",
                    AlamatDomisili = item.AlamatDomisili ?? "",
                    NomorHPCustomer = item.NomorHPCustomer ?? "",
                    TglLahir = DateUtility.FormatDate(item.TanggalLahir),
                    Usia = DateUtility.FormatAge(item.TanggalLahir, DateTime.Now),
                    Tindakan = UIHelper.GetStatusTindakan(item.StatusTindakan),
                    JanjiTemu = DateUtility.FormatTime(item.JamAppointment),
                    Reception = DateUtility.FormatDate(item.Reception, DateUtility.FormatMode.Time),
                };
                tableData.Add(dataRow);
            }


            LogTrace.Debug("table data", tableData, _classPath);

            _appointmentTblConf = new TableConfig(
                new List<TableColumn> {
                    new TableColumn {
                        Caption="Pilih", DataField="view", Type=ColumnType.View, CustomIcon="fas fa-eye", Action=SetCurrentAppointment
                    },
                    new TableColumn { Caption = "Janji Temu", DataField = "JanjiTemu" },
                    new TableColumn { Caption= "Jam Kedatangan", DataField  ="Reception"},
                    new TableColumn { Caption="Member ID", DataField="MemberID" },
                    new TableColumn { Caption = "Nama Pasien", DataField = "NamaPasien" },
                    new TableColumn { Caption = "Alamat", DataField = "AlamatDomisili" },
                    new TableColumn { Caption = "No. HP", DataField = "NomorHPCustomer" },
                    new TableColumn { Caption = "Tgl Lahir", DataField = "TglLahir" },
                    new TableColumn { Caption = "Usia", DataField = "Usia" },
                    new TableColumn { Caption = "Tindakan", DataField = "Tindakan" },
                },
                tableData
            );
        }
        else
        {
            // Handle API error case appropriately (e.g., display an error message)
            // For example: show a notification, log the error etc.

        }
    }

    private async Task SetCurrentAppointment(Dictionary<string, string> dct)
    {

        LogTrace.Info("init", dct, _classPath);
        string stIdApo = dct.GetValueOrDefault("IDAppointment") ?? "";
        var res = long.TryParse(stIdApo, out long idApo);

        if (!res)
        {
            addSnackbar("Data perawatan tidak ditemukan.", Severity.Error);
            return;
        }

        var apo = _listAppointment.FirstOrDefault(item => item.IDAppointment == idApo);

        if (apo is null)
        {
            addSnackbar("Data perawatan tidak ditemukan.", Severity.Error);
            return;
        }

        await SesMan.SetCurrentAppointment(apo);

        //update status tindakan
        var resSetStatus = await SvcAppointment.SetAppointmentOnProgress(apo);

        if (resSetStatus.Status != ServiceResultEnum.SUCCESS)
        {
            addSnackbar("Gagal mengupdate status tindakan.", Severity.Error);
            LogTrace.Error("Gagal mengupdate status tindakan", resSetStatus, _classPath);
            return;
        }


        Nav.NavigateTo("/rekam-medis/" + apo.IDAppointment);
        return;
    }
}
