@page "/dashboard"
@inherits BasePage

@using Microsoft.EntityFrameworkCore
@using ProfiraClinicRME.Utils
@using ProfiraClinicRME.Components.Table
@using ProfiraClinicRME.Model
@using ProfiraClinicRME.Infra
@using ProfiraClinic.Models.Api
@using System.Net.Http.Json
@using ProfiraClinicRME.Helpers
@using ProfiraClinicRME.Components.Layout
@using ProfiraClinicRME.Components.Section

@inject SessionService SvcSession
@inject IUserService SvcUser
@inject NavigationManager Nav
@inject IAppointmentService SvcAppointment

<TopbarUser 
Route="Dasboard"
Title="@_title"/>

<MudCard Class="p-4 h-100 rounded-3 overflow-scroll">
    <Table WithAdd="false" WithFilter="false" WithPaging="false" Config="_appointmentTblConf" />
</MudCard>

@code {

    public TableConfig _appointmentTblConf { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());


    private List<TRMAppointment> _listAppointment;
    private string _title = "Appointment list on ";

    public Dashboard()
    {
        _classPath = "App::Page::Dashboard";
        LogTrace.Info("class init", path: _classPath);

        _listAppointment = [];

    }

    protected override async Task OnInitializedAsync()
    {
        LogTrace.Info("init", path: _classPath);


        CurrentUser curUser = SvcUser.Current!;
        _title += curUser.Klinik.KETLK;

        var resApo = await SvcAppointment.GetListOnWaitAsync(curUser.KodeLokasi??"", DateTime.Today, curUser.Karyawan.KodeKaryawan);
        // Check if status code indicates success

        if (resApo.Status == ServiceResultEnum.FOUND)
        {
            _listAppointment = resApo.Data.Items;

            var tableData = _listAppointment.Select(apo => (object)new
            {
                view = "/Perawatan/" + apo.IDAppointment,
                IDAppointment = apo.IDAppointment,
                MemberID = apo.KodeCustomer,
                NamaPasien = apo.NamaCustomer,
                AlamatDomisili = apo.AlamatDomisili,
                NomorHPCustomer = apo.NomorHPCustomer,
                TglLahir = UIHelper.FormatDate(apo.TanggalLahir),
                Usia = UIHelper.FormatAge(apo.TanggalLahir, DateTime.Now),
                Tindakan = UIHelper.GetStatusTindakan(apo.StatusTindakan),
                JanjiTemu = UIHelper.FormatTime(apo.JamAppointment)

            }).ToList();

            LogTrace.Debug("table data", tableData, _classPath);

            _appointmentTblConf = new TableConfig(
                new List<TableColumn> {
                    new TableColumn { 
                        Caption="Pilih", DataField="view", Type=ColumnType.View, CustomIcon="fa fa-hand-pointer", Action=SetCurrentAppointment
                    }, 
                    new TableColumn { Caption = "Janji Temu", DataField = "JanjiTemu" },
                    new TableColumn { Caption="Member ID", DataField="MemberID" },
                    new TableColumn { Caption = "Nama Pasien", DataField = "NamaPasien" },
                    new TableColumn { Caption = "Alamat", DataField = "AlamatDomisili" },
                    new TableColumn { Caption = "No. HP", DataField = "NomorHPCustomer" },
                    new TableColumn { Caption = "Tgl Lahir", DataField = "TglLahir" },
                    new TableColumn { Caption = "Usia", DataField = "Usia" },
                    new TableColumn { Caption = "Tindakan", DataField = "Tindakan" },
                },
                tableData
            );
        }
        else
        {
            // Handle API error case appropriately (e.g., display an error message)
            // For example: show a notification, log the error etc.

        }
    }



    private async Task SetCurrentAppointment(Dictionary<string,string> dct)
    {

        LogTrace.Info("init", dct, _classPath);
        string stIdApo = dct.GetValueOrDefault("IDAppointment")?? "";
        var res = long.TryParse(stIdApo, out long idApo);

        if(!res)
        {
            addSnackbar("Data perawatan tidak ditemukan.", Severity.Error);
            return;
        }

        var apo = _listAppointment.FirstOrDefault(item => item.IDAppointment == idApo);

        if(apo is null)
        {
            addSnackbar("Data perawatan tidak ditemukan.", Severity.Error);
            return;
        }
        // SvcSession.Title = 
        SvcAppointment.SetCurrent(apo);

        //update status tindakan
        var resSetStatus = await SvcAppointment.SetAppointmentOnProgress(apo);

        if (resSetStatus.Status != ServiceResultEnum.SUCCESS)
        {
            addSnackbar("Gagal mengupdate status tindakan.", Severity.Error);
            LogTrace.Error("Gagal mengupdate status tindakan", resSetStatus, _classPath);
            return;
        }

       
        Nav.NavigateTo("/Perawatan/" + apo.IDAppointment );
        return;
    }
}
