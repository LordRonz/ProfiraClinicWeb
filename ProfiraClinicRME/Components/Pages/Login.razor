@page "/"

@layout Layout.LoginLayout

@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using BC = BCrypt.Net.BCrypt
@using Color = MudBlazor.Color
@using Microsoft.EntityFrameworkCore
@using ProfiraClinic.Models
@using ProfiraClinic.Models.Api
@using ProfiraClinicRME.Application
@using ProfiraClinicRME.Infra
@using ProfiraClinicRME.Model
@using ProfiraClinicRME.Services

@inject ApiService SvcApi
@inject AuthService AuthApiService
@inject IClinicService SvcClinic
@inject ISessionManager SesMan
@inject ISnackbar Snackbar
@inject IUserService SvcUser
@inject NavigationManager NavManager
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Login</PageTitle>

<MudGrid id="login" Class="align-center" Justify="Justify.Center">
    <MudItem xs="6" Class="d-flex justify-center align-center">
        <MudImage Style="width:400px" Src="/images/login_lady.png" ObjectFit="ObjectFit.Cover"></MudImage>

    </MudItem>

    <MudItem xs="6">

        <MudPaper Class="pa-4 mb-8 d-flex flex-column justify-center align-center w-100 bg-white bg-opacity-75 rounded-lg" Elevation="3">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Class="d-flex flex-column gap-2 w-100">
                <MudTextField @bind-Value="userName"
                              @ref="userNameField"
                              Label="Username"
                              Placeholder="enter user name here ..."
                              Style="border-radius: 20px; background-color: #F1F5F9;" Margin="Margin.Dense"
                              T="string"
                              Variant="Variant.Filled" />
                <MudTextField @bind-Value="userPass"
                              @ref="pwField"
                              Adornment="Adornment.End"
                              AdornmentAriaLabel="Show Password"
                              AdornmentIcon="@PasswordInputIcon"
                              Class="mt-3"
                              InputType="@PasswordInput"
                              Label="Password"
                              Margin="Margin.Dense"
                              OnAdornmentClick="ButtonVisibilityClick"
                              Placeholder="enter pasword here ..."
                              Style="border-radius: 20px; background-color: #F1F5F9;"
                              T="string"
                              Variant="Variant.Filled" />

                <MudSelect T="string"
                           @bind-Value="_selectedKetLok"
                           OuterClass="bg-transparent rounded-pill"
                           InputClass="bg-transparent"
                           Style="border-radius: 20px; background-color: #F1F5F9;"
                           Variant="Variant.Filled"
                           Label="Pilih klinik ..."
                           AnchorOrigin="Origin.BottomCenter">
                    @if (_listKlinik == null || !_listKlinik.Any())
                    {
                        <MudSelectItem Value="@("")">Loading clinics...</MudSelectItem>
                    }
                    else
                    {
                        @foreach (var klinik in _listKlinik)
                        {
                            <MudSelectItem Value="@klinik.KDLOK">@klinik.KETLK</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudCheckBox @bind-Value="@rememberMe" Dense="true">
                    Remember me
                </MudCheckBox>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto rounded-lg" FullWidth="true" OnClick="(() => OnSubmit())">Login</MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    private List<DateTime> markedDates = new List<DateTime>();

    private List<MKlinik> _listKlinik = new List<MKlinik>();

    private string _selectedKetLok = "";

    bool success;
    bool rememberMe = false;
    string[] errors = { };
    MudTextField<string> pwField;
    MudTextField<string> userNameField;
    string userName = "";
    string userPass = "";
    string ktp = "";
    bool isDoctor = true;
    MudForm form;

    // string GetLady()
    // {
    //     return isDoctor ? "/images/login_lady.png" : "/images/ashley.png";
    // }

    // string GetContainerClass()
    // {
    //     return isDoctor ? "background-color: #BAE0F3;" : "background-color: #C1C1C1;";
    // }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonVisibilityClick()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    protected override async Task OnInitializedAsync()
    {
        // customers = await dbContext.MKaryawan.ToListAsync();
        var svcClinic = await SvcClinic.GetListClinicsAsync(0, 10);
        System.Diagnostics.Debug.WriteLine("Done");
        if (svcClinic.Status == ServiceResultEnum.FOUND)
        {
            _listKlinik = svcClinic.Data.Items;
        }
        _selectedKetLok = _listKlinik.FirstOrDefault()?.KETLK;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // await pwField.FocusAsync();
            // StateHasChanged();
            SesMan.LoadState();
        }
    }

    private void addSnackbar(string message, Severity severity = Severity.Error)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add(message, severity);
    }

    public async Task OnSubmit()
    {
        try
        {
            var clinic = _listKlinik.FirstOrDefault(k => k.KETLK == _selectedKetLok);
            var token = await AuthApiService.LoginAsync(new LoginModel { Username = userName, Password = userPass, KodeLokasi = clinic?.KDLOK });

            // await ProtectedSessionStore.SetAsync("token", token);
            await SesMan.SetToken(token);


            // addSnackbar("Logged In", Severity.Success);

            var resUser = await SvcUser.GetCurrentUserAsync();
            if (resUser.Status != ServiceResultEnum.SUCCESS)
            {
                addSnackbar("Terjadi kesalahan sistem. (LP.OS.01)");
                return;
            }


            //get current  user data and store to session
            var user = resUser.Data;
            await SesMan.SetCurrentUser(user!);
            NavManager.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            addSnackbar($"Failed to login: {ex.Message}", Severity.Error);

        }
    }

}

<style>
    .mud-input-root {
        height: 40px !important;
        padding: 0px 10px !important;
        font-size: 14px !important;
    }

    .mud-input-label {
        font-size: 14px !important;
        line-height: 14px !important;
    }

    .mud-input-label-filled.mud-input-label-margin-dense {
        transform: translate(12px, 22px) scale(1);
    }

    .mud-input-label-inputcontrol {
        top: -10px;
    }
</style>
