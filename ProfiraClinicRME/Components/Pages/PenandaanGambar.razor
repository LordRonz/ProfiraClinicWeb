@page "/penandaan-gambar";
@inherits BasePage

@using Excubo.Blazor.Canvas
@using Microsoft.JSInterop
@using ProfiraClinic.Models.Api
@using ProfiraClinicRME.Components.Section
@using ProfiraClinicRME.Components.Widget
@using ProfiraClinicRME.Model
@using ProfiraClinicRME.Utils
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.RegularExpressions

@inject HttpClient httpClient
@inject IAppointmentService SvcAppointment
@inject IImageService SvcImage
@inject IJSRuntime JS;
@inject IPenandaanGambarService SvcPenandaanGambar
@inject ProfiraClinicRME.Utils.BrowserService Service

<TopbarUser Route="PENANDAAN GAMBAR"
            Title="Perawatan Pasien / Penandaan Gambar"
            ShowBack="true"
            ShowSave="true"
            Appointment="_apo" 
            OnSave="DoSave"
            />
<MudGrid Class="p-3 minh-100">
    <MudItem xs="12" md="6">
        <MudPaper Elevation="4" Class="pa-4 rounded-3 minh-100">
            <MudGrid>
                <MudItem xs="3">
                    <MudGrid  Class="">
                        @foreach(var markedImage in _listMarkedImage)
                        {
                            <MudItem xs="12">
                                <img id="@markedImage.Id" class="pg-img" src="@markedImage.Url" @onclick="() => DrawImage(markedImage.Id)" />
                            </MudItem>
                        }
                    </MudGrid>
                </MudItem>
                <MudItem xs="9">
                    <MudCard Elevation="4">
                        <MudCardHeader Class="">
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1"> Editor </MudText>
                                <MudText Typo="Typo.body2"> select tools and draw..</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <Canvas @ref="@_canvas" 
                                    @onmousemove="MouseMoveCanvasAsync"
                                    @onmouseup="MouseUpCanvas"
                                    @onmousedown="MouseDownCanvas"
                                    id="@_idCanvas"
                                    height="400" width="400" class="dw-canvas">
                            </Canvas>
                        </MudCardContent>
                        <MudCardActions Class="flex-row-reverse">
                            <MudIconButton Icon="@Icons.Material.Filled.Restore" Color="Color.Default" />
                            <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Default" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="6">
        <MudPaper Elevation="4" Class="pa-3 rounded-3 minh-100">
            <MudTextField T="string" Placeholder="Isi keterangan gambar di sini..." Lines="10"></MudTextField>
        </MudPaper>
    </MudItem>
</MudGrid>
<MudGrid Class="p-3 minh-100">
    <MudItem xs="12">
        <Note EntityType="@PenandaanGambarFull" ListData="@_listRekaman">
            <NoteContent>
                <MudGrid Class="p-2">
                    @foreach(var item in context.Details)
                    {

                            <MudItem xs="6" md="4">

                            <label>@item.KodeGambar</label>
                            <img class="pg-img" src="@(_baseUrl + item.IdGambar)" />


                        </MudItem>
                    }
                </MudGrid>
            </NoteContent>
        </Note>
    </MudItem>
</MudGrid>
<style>
    .pg-img {
        width: 100px;
        height: 100px;
        object-fit: contain;
        border: solid 1px #469146;
    }
</style>
@inject ProtectedLocalStorage LocalStore
@code {

    int canvasHeight { get; set; } = 0;
    int canvasWidth { get; set; } = 0;
    private bool _hidePosition;
    private bool _loading;
    private bool mousedown = false;

    private double last_mousex;
    private double last_mousey;
    private double mousex;
    private double mousey;
    private ElementReference container;
    private Excubo.Blazor.Canvas.Canvas _canvas;
    private Excubo.Blazor.Canvas.Contexts.Context2D _ctxCanvas;
    private List<PenandaanGambarFull> _listRekaman = new List<PenandaanGambarFull>();
    private List<TemplateImageDto> _listTemplate = new List<TemplateImageDto>();
    private string _baseUrl;
    private string clr = "black";
    private TRMAppointment? _apo = null;
    private int Height { get; set; } = 0;
    private int Width { get; set; } = 0;
    private List<MarkedImage> _listMarkedImage = [];

    private DrawingWidget _drawingWidget;

    private class MarkedImage
    {
        public string Id { get; set; } = "";
        public string Url { get; set; } = "";
    }

    private class Position
    {
        public double Left { get; set; }
        public double Top { get; set; }
    }


    /* drawing prop & method */
    private string _idCanvas;
    private bool render_required = true;
    private double _canvasx;
    private double _canvasy;

    private void MouseDownCanvas(MouseEventArgs e)
    {
        render_required = false;
        this.last_mousex = mousex = e.ClientX - _canvasx;
        this.last_mousey = mousey = e.ClientY - _canvasy;
        this.mousedown = true;
    }

    private void MouseUpCanvas(MouseEventArgs e)
    {
        render_required = false;
        mousedown = false;
    }

    async Task MouseMoveCanvasAsync(MouseEventArgs e)
    {
        render_required = false;
        if (!mousedown)
        {
            return;
        }
        mousex = e.ClientX - _canvasx;
        mousey = e.ClientY - _canvasy;
        await DrawCanvasAsync(mousex, mousey, last_mousex, last_mousey, clr);
        last_mousex = mousex;
        last_mousey = mousey;
    }

    private async Task DrawCanvasAsync(double prev_x, double prev_y, double x, double y, string clr)
    {
        await using (var ctx2 = _ctxCanvas.CreateBatch())
        {
            await ctx2.BeginPathAsync();
            await ctx2.MoveToAsync(prev_x, prev_y);
            await ctx2.LineToAsync(x, y);
            await ctx2.StrokeAsync();
        }

    }

    protected override bool ShouldRender()
    {
        if (!render_required)
        {
            render_required = true;
            return false;
        }
        return base.ShouldRender();
    }

    private async Task SetupCanvas()
    {
        var p = await JS.InvokeAsync<Position>("eval", $"let e = document.querySelector('[_bl_{container.Id}=\"\"]'); e = e.getBoundingClientRect(); e = {{ 'Left': e.x, 'Top': e.y }}; e");
        (_canvasx, _canvasy) = (p.Left, p.Top);
    }

    private async Task DrawImage(string IdImage)
    {
        LogTrace.Info("start", IdImage, _classPath);
        addSnackbar($"klick image: {IdImage}", Severity.Info);
        await JS.InvokeVoidAsync("eval", $"myimage = document.getElementById('{IdImage}')");

        var width = 400;
        var height = 400;
        await _ctxCanvas.ClearRectAsync(0, 0, width, height);
        await _ctxCanvas.SetTransformAsync(1, 0, 0, 1, 0, 0);
        await _ctxCanvas.FillStyleAsync("white");
        await _ctxCanvas.FillRectAsync(0, 0, width, height);
        await _ctxCanvas.RestoreAsync();
        await _ctxCanvas.SaveAsync();
        await _ctxCanvas.DrawImageAsync("myimage", 0, 0, width, height);
    }

    public PenandaanGambar()
    {
        _classPath = "App::Page::PenandaanGambar";
        LogTrace.Info("init", path: _classPath);
    }



    protected override void OnInitialized()
    {
        base.OnInitialized();
        var resApo = SvcAppointment.GetCurrent();
        if (resApo.Status != ServiceResultEnum.FOUND)
        {
            addSnackbar("Terjadi kesalahan sistem.", Severity.Error);
            return;
        }
        _apo = resApo.Data;


    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //get template
        var resImageTemplate = await SvcImage.GetListTemplateAsync();
        if (resImageTemplate.Status != ServiceResultEnum.FOUND)
        {
            addSnackbar("Gagal memuat template gambar.", Severity.Error);
            return;
        }
        _listTemplate = resImageTemplate.Data;

        //get existing data by nomor appointment


        //populate image 
        foreach(var item in _listTemplate)
        {
            var newMarkedImage = new MarkedImage()
            {
                Id = item.FileName,
                Url = _baseUrl + item.Url
            };
            _listMarkedImage.Add(newMarkedImage);
        }

        //load rekam data dummy
        List<PenandaanGambarDetail> listDetail = [
            new PenandaanGambarDetail(){
                IdDetail = 1,
                IdGambar = "test1.jpg",
                KodeGambar = "left_face.jpg"
            },
            new PenandaanGambarDetail(){
                IdDetail = 2,
                IdGambar = "test2.jpg",
                KodeGambar = "front_face.jpg"
            },
            new PenandaanGambarDetail(){
                IdDetail = 3,
                IdGambar = "test3.jpg",
                KodeGambar = "right_face.jpg"
            }
        ];

        var pgf = new PenandaanGambarFull()
        {
            NomorTransaksi = "PG/2025/08/0001",
            Keterangan = "ini keterangan.",
            Details = listDetail
        };

        _listRekaman = [pgf];
        _baseUrl = SvcImage.GetBaseUrlForUserImage();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        _ctxCanvas = await _canvas.GetContext2DAsync();

    }




    private async Task DoSave()
    {
        LogTrace.Info("start", path: _classPath);
        // var result = await _drawingWidget.CallJsFunction();
        await JS.InvokeVoidAsync("DrawingWidget.setTargetImage", "test", "left_face.jpg");

        // addSnackbar($"helllo {result?.Message}", Severity.Info);
    }

    
    private async Task GetDimensions()
    {
        var dimension = await Service.GetDimensions();
        Height = dimension.Height;
        Width = dimension.Width;

        canvasWidth = Width * 47 / 100;
        canvasHeight = Height * 4 / 5;
    }


    private async Task Save()
    {
        await JS.InvokeVoidAsync("canvas2Image");
    }

    private async Task UpdateCanvasAsync()
    {
        await JS.InvokeVoidAsync("eval", "myimage = document.getElementById('left_face')");
        await JS.InvokeVoidAsync("eval", "myimage1 = document.getElementById('front_face')");
        await JS.InvokeVoidAsync("eval", "myimage2 = document.getElementById('right_face')");

        var width = canvasWidth;
        var height = canvasHeight;

        await _ctxCanvas.ClearRectAsync(0, 0, width, height);
        await _ctxCanvas.SetTransformAsync(1, 0, 0, 1, 0, 0);
        await _ctxCanvas.FillStyleAsync("white");
        await _ctxCanvas.FillRectAsync(0, 0, width, height);
        await _ctxCanvas.RestoreAsync();
        await _ctxCanvas.SaveAsync();
        await _ctxCanvas.DrawImageAsync("myimage", 0, 0, width / 3, height / 3);
        await _ctxCanvas.DrawImageAsync("myimage1", 0, height / 3, width / 3, height / 3);
        await _ctxCanvas.DrawImageAsync("myimage2", 0, height * 2 / 3, width / 3, height / 3);

        await InvokeAsync(StateHasChanged);
    }



    


}
