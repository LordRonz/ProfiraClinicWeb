@page "/penandaan-gambar";
@inherits BasePage

@using Excubo.Blazor.Canvas
@using Microsoft.JSInterop
@using ProfiraClinic.Models.Api
@using ProfiraClinicRME.Components.Section
@using ProfiraClinicRME.Components.Widget
@using ProfiraClinicRME.Model
@using ProfiraClinicRME.Utils
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.RegularExpressions
@using ProfiraClinicRME.Infra

@inject HttpClient httpClient
@inject IAppointmentService SvcAppointment
@inject IImageService SvcImage
@inject IJSRuntime JS;
@inject IPenandaanGambarService SvcPenandaanGambar
@inject ProfiraClinicRME.Utils.BrowserService Service
@inject AuthService AuthApiService
@inject IUserService SvcUser

<TopbarUser Route="PENANDAAN GAMBAR"
            Title="Perawatan Pasien / Penandaan Gambar"
            ShowBack="true"
            ShowSave="true"
            Appointment="CurrentAppointment" 
            OnSave="SaveForm"
            />
<MudGrid Class="p-3 minh-100">
    <MudItem xs="12" md="8">
        <MudPaper Elevation="4" Class="pa-4 rounded-3 minh-100">
            <MudGrid>
                <MudItem xs="3">
                    <MudGrid  Class="">
                        @foreach(var markedImage in _listMarkedImage)
                        {
                            <MudItem xs="12">
                                <img id="@markedImage.IdElement" crossorigin="anonymous" class="pg-img" src="@markedImage.Url" @onclick="() => DrawImage(markedImage)" />
                            </MudItem>
                        }
                    </MudGrid>
                </MudItem>
                <MudItem xs="9">
                    <DrawingWidget @ref="@_drawingWidget" 
                        OnSave="SaveImage"
                        />
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudPaper Elevation="4" Class="pa-3 rounded-3 minh-100">
            <MudTextField @bind-Value="@_entityInForm.Keterangan"

                T="string" Placeholder="Isi keterangan gambar di sini..." Lines="10"></MudTextField>
        </MudPaper>
    </MudItem>
</MudGrid>
<MudGrid Class="p-3 minh-100">
    <MudItem xs="12">
        <Note EntityType="@PenandaanGambarFull" ListData="@_listRekam">
            <NoteContent>
                <MudGrid Class="p-2">
                    @foreach(var item in context.Detail)
                    {

                            <MudItem xs="6" md="4">

                            <label>@item.KodeGambar</label>
                            <img class="pg-img" src="@(_baseUrl + item.IDGambar)" />


                        </MudItem>
                    }
                </MudGrid>
            </NoteContent>
        </Note>
    </MudItem>
</MudGrid>
<style>
    .pg-img {
        width: 100px;
        height: 100px;
        object-fit: contain;
        border: solid 1px #469146;
    }
</style>

@inject ProtectedLocalStorage LocalStore
@code {
    [CascadingParameter(Name = "CurrentAppointment")]
    public TRMAppointment CurrentAppointment { get; set; }

    private bool _hidePosition;
    private List<PenandaanGambarFull> _listRekam = [];
    private List<TemplateImageDto> _listTemplate = [];
    private bool _loading;
    private string _baseUrl;
    private string clr = "black";
    private int Height { get; set; } = 0;
    private int Width { get; set; } = 0;
    private DrawingWidget _drawingWidget;
    private List<MarkedImage> _listMarkedImage = [];
    private MarkedImage _openedImage = new();
    private PenandaanGambarFull _entityInForm = new();
    private enum SaveMode
    {
        ADD,
        EDIT,
        NONE
    };
    private SaveMode _saveMode = SaveMode.ADD;

    private class MarkedImage
    {
        public string IdElement { get; set; } = "";

        public TRMPenandaanGambarDetail ItemDetail { get; set; } = new();

        public string Url { get; set; } = "";
        public SaveMode SaveMode { get; set; } = SaveMode.NONE;
        public bool IsTemplate { get; set; } = true;

    }

    private class Position
    {
        public double Left { get; set; }
        public double Top { get; set; }
    }

    public PenandaanGambar()
    {
        _classPath = "App::Page::PenandaanGambar";
        LogTrace.Info("init", path: _classPath);
    }



    protected override void OnInitialized()
    {
        base.OnInitialized();

        _baseUrl = SvcImage.GetBaseUrlForUserImage();
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // var token = await AuthApiService.LoginAsync(new LoginModel { Username = "DRFIFIN", Password = "12345678", KodeLokasi = "LOKASI1" });
        // var resUser = await SvcUser.UpdateCurrentUserAsync();


        //get template
        var resImageTemplate = await SvcImage.GetListTemplateAsync();
        if (resImageTemplate.Status != ServiceResultEnum.FOUND)
        {
            addSnackbar("Gagal memuat template gambar.", Severity.Error);
            return;
        }
        _listTemplate = resImageTemplate.Data!;


        //ambil rekam medis penandaan gambar
        var resRekam = await SvcPenandaanGambar.GetListAsync(CurrentAppointment.KodeCustomer);
        if (resRekam.Status == ServiceResultEnum.FOUND)
        {
            _listRekam = resRekam.Data!.Items;

            // _displayTRMDiagnosa = _listTRMDiagnosa.FirstOrDefault();
        }
        else
        {
            addSnackbar("Gagal memuat Rekam Medis Penandaan Gambar.", Severity.Error);
        }



        //get existing data by nomor appointment
        var resCheck = await SvcPenandaanGambar.GetByNomorAppointment(CurrentAppointment.NomorAppointment);
        if (resCheck.Status == ServiceResultEnum.FOUND)
        {
            _entityInForm = resCheck.Data!;
            addSnackbar("Memuat ulang data Penandaan.", Severity.Info);

        }
        _entityInForm.NomorAppointment = CurrentAppointment?.NomorAppointment ?? "";
        _entityInForm.KodeKaryawan = CurrentAppointment?.KodeKaryawan ?? "";
        _entityInForm.KodeCustomer = CurrentAppointment?.KodeCustomer ?? "";
        _entityInForm.KodeLokasi = CurrentAppointment?.KodeLokasi ?? "";

        //todo: populate image from the following source, highest proprty first: rekam medis, template
        //assumption latest rekam medis is also the current appointment
        var _idCounter = 0;
        List<TRMPenandaanGambarDetail> listDetail = [];
        var dctDetail = new Dictionary<string, MarkedImage>();
        foreach(var item in _listTemplate)
        {
            _idCounter++;
            var newDetail = new TRMPenandaanGambarDetail
            {
                IDDetail = 0,
                IDGambar = item.FileName,
                KodeGambar = item.FileName,
            };
            var newMarkedImage = new MarkedImage()
            {
                IdElement = $"img-{_idCounter:D2}",
                ItemDetail = newDetail,
                Url = item.Url,
                IsTemplate = true
            };
            dctDetail[item.FileName] = newMarkedImage;
        }

        //load rekam detail 

        List<TRMPenandaanGambarDetail> lastRekamDetail = _listRekam.LastOrDefault()?.Detail ?? [];
        foreach(var item in lastRekamDetail)
        {

            dctDetail[item.KodeGambar].ItemDetail = item;
            dctDetail[item.KodeGambar].IsTemplate = false;
            dctDetail[item.KodeGambar].Url = _baseUrl + item.IDGambar;
        }


        //load current transaction
        var lastRekam = _listRekam.LastOrDefault();
        //assume nomar trans filled if current trans recorded
        string lastNoTrans = lastRekam?.NomorTransaksi ?? "";
        string curNoTrans = _entityInForm.NomorTransaksi;
        if(curNoTrans != "" && curNoTrans != lastNoTrans)
        {
            foreach(var item in _entityInForm.Detail)
            {
                dctDetail[item.KodeGambar].ItemDetail = item;
                dctDetail[item.KodeGambar].IsTemplate = false;
                dctDetail[item.KodeGambar].Url = _baseUrl + item.IDGambar;
            }
        }

        //output to respected view data variables
        listDetail = dctDetail.ToList().Select(kv => kv.Value.ItemDetail).ToList();
        _entityInForm.Detail = listDetail;
        _listMarkedImage = dctDetail.ToList().Select(kv => kv.Value).ToList();

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

    }




    private async Task DrawImage(MarkedImage markedImage)
    {
        LogTrace.Info("start", path: _classPath);
        _openedImage = markedImage;

        // var result = await _drawingWidget.CallJsFunction();
        // await JS.InvokeVoidAsync("DrawingWidget.setTargetImage", "test", "left_face.jpg");
        await _drawingWidget.DrawImageToCanvas(markedImage.IdElement);
        // addSnackbar($"helllo {result?.Message}", Severity.Info);
    }

    private async Task SaveImage()
    {
        LogTrace.Info("start", path: _classPath);

        if(_openedImage is null)
        {
            return;
        }

        string blobName = await _drawingWidget.GenDrawingBlob();
        if (blobName == "")
        {
            addSnackbar("Gagal menyimpan gambar.", Severity.Error);
            return;
        }

        StateHasChanged();

        var resUpload = await SvcImage.UploadBlob(blobName, "test.jpg");
        if(resUpload.Status != ServiceResultEnum.SUCCESS)
        {
            addSnackbar("Gagal mengunggah gambar.", Severity.Error);
            return;
        }


        await _drawingWidget.CopyToImage(_openedImage.IdElement);

        var kodeGambar = _openedImage.ItemDetail.KodeGambar;

        var itemDetail = _entityInForm.Detail.Where(item => item.KodeGambar == kodeGambar).FirstOrDefault();
        //update current marked image url
        _openedImage.ItemDetail.IDGambar = resUpload.Data.FileName;
        _openedImage.Url = _baseUrl + resUpload.Data.FileName;
        _openedImage.IsTemplate = false;





        addSnackbar("Gambar berhasil disimpan dengan id " + blobName, Severity.Success);
    }

    private List<TRMPenandaanGambarDetail> PopulateDetail(List<TemplateImageDto> listTemplate, List<TRMPenandaanGambarDetail> listLastDetail, List<TRMPenandaanGambarDetail> listExistingDetail)
    {
        var listDetail = new List<TRMPenandaanGambarDetail>();
        //todo
        return listDetail;
    }

    private async Task SaveForm()
    {
        var isNewHeader = _entityInForm.NomorTransaksi == "" ? true : false;
        LogTrace.Debug("start: " + (isNewHeader ? "baru" : "lama"), _entityInForm, _classPath);
        var msg = "";

        bool isError = false;

        //save header
        var resHeader = new ServiceResult<NomorTransaksiDto>();
        if (isNewHeader)
        {
            resHeader = await SvcPenandaanGambar.AddHeader(_entityInForm);
        } 
        else
        {
            resHeader = await SvcPenandaanGambar.EditHeader(_entityInForm);
        }

        if(resHeader.Status != ServiceResultEnum.SUCCESS)
        {

            addSnackbar("Gagal menyimpan data penandaan gambar.", Severity.Error);
            LogTrace.Error("Fail: store header", resHeader, _classPath);
            return;
        }
        _entityInForm.NomorTransaksi = resHeader.Data!.NomorTransaksi;

        //save template to normal image
        //save detail 
        foreach(var item in _listMarkedImage)
        {
            if (item.IsTemplate)
            {

                string blobName = await _drawingWidget.GenImageBlob(item.IdElement);
                if (blobName == "")
                {
                    // addSnackbar("Gagal menyimpan gambar.", Severity.Error);
                    LogTrace.Error("Fail: generate blob for " + item.ItemDetail.KodeGambar, item,  _classPath);

                    isError = true;
                    continue;
                }

                StateHasChanged();

                var resUpload = await SvcImage.UploadBlob(blobName, "test.jpg");
                if (resUpload.Status != ServiceResultEnum.SUCCESS)
                {
                    // addSnackbar("Gagal mengunggah gambar.", Severity.Error);
                    LogTrace.Error("Fail: upload image " + item.ItemDetail.KodeGambar, resUpload, _classPath);
                    isError = true;
                    continue;
                }
                item.ItemDetail.IDGambar = resUpload.Data.FileName;
                item.Url = _baseUrl + resUpload.Data.FileName;
                item.IsTemplate = false;

            }

            if(item.ItemDetail.IDDetail == 0)
            {
                //new detail
                item.ItemDetail.NomorTransaksi = _entityInForm.NomorTransaksi;
                var resDetail = await SvcPenandaanGambar.AddDetail(item.ItemDetail);
                if(resDetail.Status != ServiceResultEnum.SUCCESS)
                {
                    // addSnackbar("Gagal menyimpan data detail penandaan gambar.", Severity.Error);

                    LogTrace.Error("Fail: store detail " + item.ItemDetail.KodeGambar, item, _classPath);
                    isError = true;
                    continue;
                }
            }
            else
            {
                //edit detail
                var resDetail = await SvcPenandaanGambar.EditDetail(item.ItemDetail);
                if(resDetail.Status != ServiceResultEnum.SUCCESS)
                {
                    // addSnackbar("Gagal mengubah data detail penandaan gambar.", Severity.Error);
                    isError = true;
                    LogTrace.Error("Fail: store detail " + item.ItemDetail.KodeGambar, item, _classPath);
                    continue;
                }
            }
        }
        if(isError)
        {
            msg = "Proses penyimpanan data penandaan gambar selesai dengan beberapa kesalahan.";
            addSnackbar(msg, Severity.Warning);
        } 
        else
        {
            msg = "Proses penyimpanan data penandaan gambar berhasil.";
            addSnackbar(msg, Severity.Success);
        }
        LogTrace.Info("fin: " + msg, path: _classPath);
    }

}
