@page "/diagnosa"
@inherits BasePage

@using System.Net.Http.Json
@using ProfiraClinic.Models.Api
@using ProfiraClinicRME.Model
@using ProfiraClinicRME.Utils
@using ProfiraClinicRME.Components.Layout
@using ProfiraClinicRME.Components.Section
@using ProfiraClinicRME.Components.Widget

@inject HttpClient httpClient
@inject IAppointmentService SvcAppointment
@inject IDiagnosaService SvcDiagnosa
@inject IJSRuntime JSRuntime
@inject IMasterDiagnosaService SvcMasterDiagnosa
@inject NavigationManager Nav
@inject ProtectedLocalStorage LocalStore


<TopbarUser Route="Dashboard >> Rekam Medis >> Diagnosa/ICD"
    Title="Diagnosa/ICD "
    Appointment="CurrentAppointment"
    ShowBack="true"
    ShowSave="true"
    OnSave="DoSave" />

<MudCard Class="pa-4 minh-100 rounded-lg pemeriksaan-input">
    <MudCard Class="px-4 py-8">
        <MudGrid Class="gap-y-2 flex-column" Style="max-width: 85%;" >
            <MudItem xs="4" Class="pa-1">
                <MudAutocomplete 
                    Value="@_selMasterDiagnosa"
                    ValueChanged="@DoUpdateDiagnosaICD"
                    Adornment="Adornment.End"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    AnchorOrigin="Origin.BottomCenter"
                    T="MDiagnosaExt" 
                    Label="ICD" 
                    SearchFunc="@DoSearchICD" 
                    Strict=false
                    Variant="Variant.Outlined" 
                    ShowProgressIndicator="true" />
            </MudItem>
            <MudItem xs="5" Class="pa-1">
                <MudSelect 
                @bind-Value="@_trmDiagnosaInForm.KategoriDiagnosa"
                T="string" 
                Label="Kategori"
                AnchorOrigin="Origin.BottomCenter" 
                ShrinkLabel 
                Variant="Variant.Outlined">
                    <MudSelectItem Value="@("Primary")" />
                    <MudSelectItem Value="@("Secondary")" />
                </MudSelect>
            </MudItem>
            <MudItem xs="12" Class="pa-1">
                <MudTextField @bind-Value="@_trmDiagnosaInForm.KeteranganDiagnosa" 
                ShrinkLabel 
                T="string" 
                Label="Keterangan" 
                Variant="Variant.Outlined" Lines="10" />
            </MudItem>
        </MudGrid>
    </MudCard>
    <MudCard Class="mt-8">
        <Note EntityType="@TRMDiagnosa" ListData="@_listRekamMedis">
            <NoteContent>
                @{
                    string[][] displayData = [[]];
                    if (context is not null)
                    {
                        displayData = [
                            ["Kunjungan", context.NomorAppointment ?? ""],
                            ["ICD", $"{context.KodeDiagnosa}  {context.NamaDiagnosa}"],
                            ["Kategori" , context.KategoriDiagnosa ?? ""],
                            ["Keterangan", context.KeteranganDiagnosa ?? ""],
                            ["Lokasi", context.KETLK ?? ""],
                            ["Dokter", context.NamaKaryawan ?? ""],
                            [DateUtility.FormatDate(context.UPDDT, DateUtility.FormatMode.DateTime), ""]
                        ];
                    }
                }
                <TableGen Data="@displayData" />
            </NoteContent>
        </Note>
    </MudCard>
</MudCard>



@code {
    [CascadingParameter(Name = "CurrentAppointment")]
    public TRMAppointment CurrentAppointment { get; set; }

    private bool _hidePosition;
    private bool _loading;
    private MDiagnosaExt? _selMasterDiagnosa;
    private List<MDiagnosaExt> _listMasterDiagnosa = [];
    private List<TRMDiagnosa> _listRekamMedis = [];
    private TRMDiagnosa _trmDiagnosaInForm = new TRMDiagnosa();
    private string _saveMode = "add";


    public Diagnosa()
    {
        _classPath = "App::Page::Diagnosa";
        LogTrace.Info("init", path: _classPath);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        //ambil data master diagnosa
        var resMasterDiagnosa = await SvcMasterDiagnosa.GetListByStringAsync(1,10,"");
        if (resMasterDiagnosa.Status == ServiceResultEnum.FOUND)
        {
            _listMasterDiagnosa = resMasterDiagnosa.Data.Items;
        }
        else
        {
            addSnackbar("Gagal memuat data ICD.", Severity.Error);
        }

        //ambil rekam medis diagnosa
        var resDiagnosa = await SvcDiagnosa.GetListAsync(CurrentAppointment.KodeCustomer);
        switch (resDiagnosa.Status)
        {
            case ServiceResultEnum.FOUND:
                _listRekamMedis = resDiagnosa.Data.Items;
                break;
            case ServiceResultEnum.NOT_FOUND:
                addSnackbar("Tidak ditemukan riwayat Diagnosa", Severity.Info);
                break;
            default:
                var msg = "Gagal memuat riwayat Diagnosa.";
                LogTrace.Error(msg, resDiagnosa, _classPath);
                addSnackbar(msg, Severity.Error);
                break;
        }

        //cek apakah sudah ada diagnosa untuk appointment ini
        var resCheck = await SvcDiagnosa.GetByNomorAppointment(CurrentAppointment.NomorAppointment);
        if (resCheck.Status == ServiceResultEnum.FOUND)
        {
            _saveMode = "edit";
            _trmDiagnosaInForm = resCheck.Data!;
            _selMasterDiagnosa = _listMasterDiagnosa.Where(item=> item.KodeDiagnosa == _trmDiagnosaInForm.KodeDiagnosa).FirstOrDefault();
            addSnackbar("Memuat ulang data Diagnosa.", Severity.Info);

        }
        _trmDiagnosaInForm.NomorAppointment = CurrentAppointment.NomorAppointment ?? "";
        _trmDiagnosaInForm.KodeKaryawan = CurrentAppointment.KodeKaryawan ?? "";
        _trmDiagnosaInForm.KodeCustomer = CurrentAppointment.KodeCustomer ?? "";
        _trmDiagnosaInForm.KodeLokasi = CurrentAppointment.KodeLokasi ?? "";
        await InvokeAsync(StateHasChanged);
    }

    private void DoUpdateDiagnosaICD(MDiagnosaExt? item)
    {
        _trmDiagnosaInForm.KeteranganDiagnosa = item?.NamaDiagnosa ?? "";
        _trmDiagnosaInForm.KodeDiagnosa = item?.KodeDiagnosa ?? "";
    }

    private async Task DoSave()
    {
        LogTrace.Info("start", path: _classPath);
        _trmDiagnosaInForm.TanggalTransaksi = DateTime.Now;
        // _trmDiagnosaInForm.KodeLokasi = _apo?.KodeLokasi??"-";
        // _trmDiagnosaInForm.NomorAppointment = _apo?.NomorAppointment;
        // _trmDiagnosaInForm.KodeCustomer = _apo?.KodeCustomer;
        // _trmDiagnosaInForm.KodeKaryawan = _apo?.KodeKaryawan;
        _trmDiagnosaInForm.KodeDiagnosa = _selMasterDiagnosa?.KodeDiagnosa ?? "";
        //kategori binded
        //keterangan binded
        ServiceResult<NomorTransaksiDto> resSave;
        string msg = "";
        if(_saveMode == "add")
        {
            resSave = await SvcDiagnosa.Add(_trmDiagnosaInForm);
            msg = "Penyimpanan Diagnosa Berhasil Dilakukan";
        } 
        else
        {
            resSave = await SvcDiagnosa.Edit(_trmDiagnosaInForm);
            msg = "Perubahan Diagnosa Berhasil Dilakukan";
        }
        LogTrace.Info("Result Save", resSave, _classPath);
        if (resSave.Status == ServiceResultEnum.SUCCESS)
        {
            addSnackbar(msg, Severity.Info);
            await Task.Delay(1000);
            Nav.NavigateTo("/perawatan/" + CurrentAppointment.IDAppointment);
        }
        else
        {
            addSnackbar("Penyimpanan diagnosa gagal dilakukan", Severity.Error);

        }

    }

    private async Task<IEnumerable<MDiagnosaExt>> DoSearchICD(string searchText, CancellationToken token)
    {
        LogTrace.Debug("start", searchText, _classPath);
        // Forward the CancellationToken to methods which supported, such as HttpClient and DbContext
        var resSearch =  await SvcMasterDiagnosa.GetListByStringAsync(1,10, searchText);
        if(resSearch.Status == ServiceResultEnum.FOUND)
        {
            _listMasterDiagnosa = resSearch.Data.Items;
        }
        else
        {
            _listMasterDiagnosa = [];
        }
        return _listMasterDiagnosa;
    }

}
