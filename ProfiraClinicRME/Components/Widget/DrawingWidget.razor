@inherits BaseWidget

@using Excubo.Blazor.Canvas
@using Excubo.Blazor.Canvas.Contexts
@using MudBlazor.Utilities

@inject IJSRuntime JS

<MudCard Elevation="4" id="@_idWidget" Class="dw">
    <MudCardHeader Class="">
        <CardHeaderContent>
            <MudText Typo="Typo.body1"> Editor </MudText>
            <MudText Typo="Typo.body2"> select tools and draw..</MudText>
            <div class="d-flex justify-space-between gap-2 p-2 align-center" style="height:6em">
                <ColorPicker Value="@_color" ValueChanged="DoUpdateColor" />
                <MudToggleIconButton Toggled="@(_drawMode == "free" ? true : false)"
                                     Icon="@Icons.Material.Filled.Brush"
                                     Color="@Color.Dark"
                                     ToggledIcon="@Icons.Material.Filled.Brush"
                                     ToggledColor="@Color.Success"
                                     title="Free" ToggledChanged="@(() => SetMode("free"))" />
                <MudToggleIconButton Toggled="@(_drawMode == "rectangle" ? true : false)"
                                     Icon="@Icons.Material.Filled.Square"
                                     Color="@Color.Dark"
                                     ToggledIcon="@Icons.Material.Filled.Square"
                                     ToggledColor="@Color.Success"
                                     title="Rectangle" ToggledChanged="@(() => SetMode("rectangle"))" />
                <MudToggleIconButton Toggled="@(_drawMode == "ellipse" ? true : false)"
                                     Icon="@Icons.Material.Filled.Circle"
                                     Color="@Color.Dark"
                                     ToggledIcon="@Icons.Material.Filled.Circle"
                                     ToggledColor="@Color.Success"
                                     title="Ellipse"
                                     ToggledChanged="@(() => SetMode("ellipse"))" />
                <MudIconButton OnClick="DoReset" Icon="@Icons.Material.Filled.Restore" Color="Color.Warning" />
                <MudIconButton OnClick="OnSave" Icon="@Icons.Material.Filled.Save" Color="Color.Primary" />

            </div>

        </CardHeaderContent>
        <CardHeaderActions>

        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <div @ref="@_container">
            <Canvas @ref="@_canvasDraw"
                    id="@_idDrawingCanvas"
                    height="400" width="400" class="dw-canvas">
            </Canvas>
            <Canvas @ref="@_canvasHidden"
                    id="@_idHiddenCanvas"
                    hidden
                    height="400" width="400">
            </Canvas>
        </div>
    </MudCardContent>
    <MudCardActions Class="flex-row-reverse">

    </MudCardActions>
</MudCard>
<style>
    @_widgetCss
</style>
@code {
    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public int Side { get; set; } = 400;

    private bool _isLoaded = false;
    private bool _mouseDown = false;
    private bool _renderRequired = true;
    private Canvas _canvasDraw = new();
    private Canvas _canvasHidden = new();
    private Context2D? _ctxCanvasDraw;
    private Context2D? _ctxCanvasHidden;
    private Context2D? ctx;
    private double _canvasDrawX;
    private double _canvasDrawY;
    private double _mouseX;
    private double _mouseY;
    private double _prevMouseX;
    private double _prevMouseY;
    private ElementReference _container;
    private IJSObjectReference? _drawingWidgetJsInstance;
    private int _canvasDrawHeight { get; set; } = 0;
    private int _canvasDrawWidth { get; set; } = 0;
    private MudColor _mudColor = new(0, 0, 0, 255);
    private string _color = "black";
    private string _drawMode = "free";
    private string _guid = "";
    private string _idDrawingCanvas = "";
    private string _idHiddenCanvas = "";
    private string _idWidget = "";
    private string _widgetCss = "";

    private class Position
    {
        public double Left { get; set; }
        public double Top { get; set; }
    }

    public DrawingWidget()
    {
        _classPath = "App::Widget::DrawingWidget";
    }

    public async Task DoUpdateColor(string color)
    {
        _color = color;
        _mudColor = new MudColor(color);
        if (_drawingWidgetJsInstance is not null)
        {
            await _drawingWidgetJsInstance.InvokeVoidAsync("setColor", color);

        }
    }

    public async Task CopyToImage(string IdImage)
    {
        LogTrace.Info("start", IdImage, _classPath);
        if (!_isLoaded)
        {
            LogTrace.Info("warn: not loaded", path: _classPath);
            return;
        }
        OpStatus opStatus = await ProcessJsInvocation("DrawingService.copyToImage", _idWidget, IdImage);

        /* await JS.InvokeVoidAsync("eval", $"myimage = document.getElementById('{IdImage}')");
        await JS.InvokeVoidAsync("eval", $"mycanvas = document.getElementById('{_idWidget}').querySelector('canvas')");
        await JS.InvokeVoidAsync("eval", $"myimage.src = mycanvas.toDataURL()"); */

        if (opStatus.Status != 0)
        {
            LogTrace.Error(opStatus.Message, opStatus.Data, _classPath);
            return;
        }

        LogTrace.Info("end", IdImage, _classPath);
        return;
    }

    public async Task<bool> DrawImageToCanvas(string IdImage)
    {
        LogTrace.Info("start", IdImage, _classPath);


        var res = await DrawImage(_ctxCanvasDraw, IdImage);
        if (res) _isLoaded = true;
        else _isLoaded = false;

        LogTrace.Info("fin", IdImage, _classPath);
        return res;
    }

    private async Task<bool> DrawImage(Context2D? ctx, string IdImage)
    {
        LogTrace.Info("start", IdImage, _classPath);

        /* if (ctx is null )
        {
            LogTrace.Info("warn: ctx is null", ctx.ToString(), path: _classPath);
            return false;
            } */

        if (_drawingWidgetJsInstance is null)
        {
            LogTrace.Info("warn: drawing is null", path: _classPath);
            return false;
        }

        /* await JS.InvokeVoidAsync("eval", $"myimage = document.getElementById('{IdImage}')"); */

        /* var width = 400;
        var height = 400;
        await ctx.ClearRectAsync(0, 0, width, height);
        await ctx.SetTransformAsync(1, 0, 0, 1, 0, 0);
        await ctx.FillStyleAsync("white");
        await ctx.FillRectAsync(0, 0, width, height);
        await ctx.RestoreAsync();
        await ctx.SaveAsync();
        await ctx.DrawImageAsync("myimage", 0, 0, width, height); */
        await _drawingWidgetJsInstance.InvokeVoidAsync("drawImageFromId", IdImage);
        return true;
    }

    private async Task<OpStatus> ProcessJsInvocation(string methodName, params object[] parameters)
    {
        LogTrace.Info("start", methodName, _classPath);
        OpStatus opStatus = new();
        try
        {

            opStatus = await JS.InvokeAsync<OpStatus>(methodName, parameters);
        }
        catch (Microsoft.JSInterop.JSException ex)
        {
            // Catch a specific exception for JavaScript interop errors
            opStatus.Status = 1; // Set a failure status
            opStatus.Message = $"JavaScript error: {ex.Message}";
            opStatus.Data = ex;
        }
        catch (Exception ex)
        {
            // Catch any other general exceptions
            opStatus.Status = 1; // Set a failure status
            opStatus.Message = $"C# error: {ex.Message}";
            opStatus.Data = ex;
        }
        return opStatus;
    }

    private async Task DoReset()
    {
        LogTrace.Info("start", path: _classPath);
        if (!_isLoaded)
        {
            LogTrace.Info("warn: not loaded", path: _classPath);
            return;
        }

        if(_drawingWidgetJsInstance is null)
        {
            LogTrace.Info("warn: drawing is null", path: _classPath);
            return;
        }
        await _drawingWidgetJsInstance.InvokeVoidAsync("resetCanvas");

        LogTrace.Info("end", path: _classPath);
        return;
    }

    /// <summary>
    /// gen image from img tag
    /// </summary>
    /// <param name="IdElement">id of img tag</param>
    /// <returns></returns>
    public async Task<string> GenImageBlob(string IdElement)
    {

        LogTrace.Info("start", IdElement, _classPath);

        var res = await DrawImage(_ctxCanvasHidden, IdElement);
        if (!res)
        {
            LogTrace.Info("warn: fail to get image", path: _classPath);
            return "";
        }
        string blobName = "dw-blob-" + Util.GenerateRandomAlphanumeric(10);

        OpStatus opStatus = await ProcessJsInvocation("DrawingService.genBlob", _idHiddenCanvas, blobName);



        if (opStatus.Status != 0)
        {
            LogTrace.Error(opStatus.Message, opStatus.Data, _classPath);
            return "";
        }

        LogTrace.Info("end", blobName, _classPath);
        return blobName;
    }

    /// <summary>
    /// generate blob of user drawing
    /// </summary>
    /// <returns>return string if the canvas already loaded, else return empty string</returns>
    public async Task<string> GenDrawingBlob()
    {
        if (!_isLoaded)
        {
            LogTrace.Info("warn: not loaded", path: _classPath);
            return "";
        }
        string blobName = "dw-blob-" + Util.GenerateRandomAlphanumeric(10);

        OpStatus opStatus = await ProcessJsInvocation("DrawingService.genBlob", _idDrawingCanvas, blobName);

        /* OpStatus opStatus = new();
        try
        {

            opStatus = await JS.InvokeAsync<OpStatus>("DrawingService.genBlob", _idWidget, blobName);
            }
        catch (Microsoft.JSInterop.JSException ex)
        {
            // Catch a specific exception for JavaScript interop errors
            opStatus.Status = 1; // Set a failure status
            opStatus.Message = $"JavaScript error: {ex.Message}";
            opStatus.Data = ex;
            }
        catch (Exception ex)
        {
            // Catch any other general exceptions
            opStatus.Status = 1; // Set a failure status
            opStatus.Message = $"C# error: {ex.Message}";
            opStatus.Data = ex;
            } */

        if (opStatus.Status != 0)
        {
            LogTrace.Error(opStatus.Message, opStatus.Data, _classPath);
            return "";
        }

        LogTrace.Info("end", blobName, _classPath);
        return blobName;
    }

    protected override bool ShouldRender()
    {
        if (!_renderRequired)
        {
            _renderRequired = true;
            return false;
        }
        return base.ShouldRender();
    }

    protected override void OnInitialized()
    {
        // Generate a new unique ID using Guid and assign it to the property.
        base.OnInitialized();
        _guid = Guid.NewGuid().ToString();
        _idWidget = "dw-" + _guid;
        _idHiddenCanvas = "dw-hdn-" + _guid;
        _idDrawingCanvas = "dw-drw-" + _guid;

        var width = Side + 32;
        _widgetCss = $@"
            #{_idWidget} {{
                min-width: {width}px;
                max-width: {width}px;
            }}
        ";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            // await GetDimensions();
            _ctxCanvasDraw = await _canvasDraw.GetContext2DAsync();
            await _ctxCanvasDraw.LineWidthAsync(4);
            _ctxCanvasHidden = await _canvasHidden.GetContext2DAsync();
            await InstantiateDrawingJs();

            // await SetupCanvas();
        }

        var p = await JS.InvokeAsync<Position>("eval", $"var dw = document.querySelector('[_bl_{_container.Id}=\"\"]'); e = dw.getBoundingClientRect(); e = {{ 'Left': e.x, 'Top': e.y }}; e");
        (_canvasDrawX, _canvasDrawY) = (p.Left, p.Top);
        LogTrace.Debug("trace", p, _classPath);

    }

    private async Task SetMode(string mode)
    {
        _drawMode = mode;
        if (_drawingWidgetJsInstance is not null)
        {
            await _drawingWidgetJsInstance.InvokeVoidAsync("setMode", mode);
        }
    }

    private async Task InstantiateDrawingJs()
    {
        try
        {
            // Use InvokeAsync to call the global JS function
            _drawingWidgetJsInstance = await JS.InvokeAsync<IJSObjectReference>("CreateDrawingWidget", _guid);
            LogTrace.Info("JavaScript class instance created.", _guid, _classPath);
        }
        catch (JSException ex)
        {
            LogTrace.Error("Fail to create javaScript class instance.", ex.Message, _classPath);
        }
    }

    private void MouseDownCanvas(MouseEventArgs e)
    {
        _renderRequired = false;
        _prevMouseX = _mouseX = e.ClientX - _canvasDrawX;
        _prevMouseY = _mouseY = e.ClientY - _canvasDrawY;
        _mouseDown = true;
    }

    private void MouseUpCanvas(MouseEventArgs e)
    {
        _renderRequired = false;
        _mouseDown = false;
    }

    private async Task MouseMoveCanvasAsync(MouseEventArgs e)
    {
        _renderRequired = false;
        if (!_mouseDown)
        {
            return;
        }
        _mouseX = e.ClientX - _canvasDrawX;
        _mouseY = e.ClientY - _canvasDrawY;
        await DrawCanvasAsync(_mouseX, _mouseY, _prevMouseX, _prevMouseY, _color);
        _prevMouseX = _mouseX;
        _prevMouseY = _mouseY;
    }

    private async Task DrawCanvasAsync(double prev_x, double prev_y, double x, double y, string clr)
    {
        await using (var ctx2 = _ctxCanvasDraw.CreateBatch())
        {
            await ctx2.BeginPathAsync();
            await ctx2.MoveToAsync(prev_x, prev_y);
            await ctx2.LineToAsync(x, y);
            await ctx2.StrokeAsync();
        }

    }
}