@typeparam EntityType where EntityType : class, new()
@inherits BaseWidget

<div>
    <div class="d-flex header-note justify-content-between px-4 py-2">
        <div class="d-flex align-items-center justify-content-center gap-3">
            <MudIcon Icon="@Icons.Material.Filled.Note" Color="MudBlazor.Color.Default" />
            <h2 class="m-0" style="font-size: 16px;">Catatan Medis</h2>
        </div>
        <MudButton Size="MudBlazor.Size.Small"
                   StartIcon="fa fa-arrow-left"
                   IconSize="@MudBlazor.Size.Small"
                   Class="back-btn mt-2 align-items-center flex-shrink-1 flex-grow-0"
                   Style="margin: 0px !important;"
                   Disabled="_prevDisabled"
                   OnClick="DoPrev">
            Sebelum
        </MudButton>
        <MudButton 
            Size="MudBlazor.Size.Small" 
            StartIcon="fa fa-arrow-right" 
            IconSize="@MudBlazor.Size.Small" 
            Class="back-btn mt-2 align-items-center flex-shrink-1 flex-grow-0" 
            Style="margin: 0px !important;"
            Disabled="_nextDisabled"
            OnClick="DoNext"
        >
            Sesudah
            </MudButton>

    </div>
    <div style="background-color: rgba(250, 242, 242, 1);" class="p-4">
        @if (_showBlank)
        {
            <p>N/A</p>
        } else
        {
            @NoteContent(_displayedEntity)
        }

    </div>
</div>

@code {
    [Parameter]
    public RenderFragment<EntityType>? NoteContent { get; set; }

    /// <summary>
    /// data must be sorted before by date asc
    /// </summary>
    [Parameter]
    public List<EntityType> ListData { get; set; } = [];

    private bool _prevDisabled = false;

    private bool _nextDisabled = false;

    private bool _showBlank = true;

    private EntityType _displayedEntity;

    private List<EntityType> _listData = [];

    /// <summary>
    /// if 0 then data is null
    /// </summary>
    private int _idx = 0;

    public Note()
    {
        _classPath = "App::Widget::Note";
        _displayedEntity = new EntityType();

        LogTrace.Info("init", path: _classPath);

    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (NoteContent is null || ListData.Count == 0)
        {
            _showBlank = true;
            _nextDisabled = true;
            _prevDisabled = true;
            return;
        }

        //set data on last
        _showBlank = false;
        _idx = ListData.Count;
        _displayedEntity = ListData.Skip(_idx-1).First();
        _nextDisabled = true;
        _prevDisabled = _idx == 1 ? true: false;

        // {
        //     NoteContent = (context) => (builder) =>
        //     {
        //         builder.OpenElement(0, "p");
        //         builder.AddAttribute(1, "class", "style1");
        //         builder.AddContent(2, "n/a");
        //         builder.CloseElement();
        //     };
        //     return;
        // }
    }

    private void DoNext()
    {
        _idx++;
        _displayedEntity = ListData.Skip(_idx-1).First();
        _nextDisabled = _idx == ListData.Count ? true : false;
        _prevDisabled = _idx != 1 ? false : true;
    }

    private void DoPrev()
    {
        _idx--;
        _displayedEntity = ListData.Skip(_idx - 1).First();
        _prevDisabled = _idx == 1 ? true : false;
        _nextDisabled = _idx != ListData.Count ? false : true;
    }

}

<style>

    .back-btn {
        background: rgba(156, 99, 5, 1);
        color: white;
        text-transform: none;
    }

        .back-btn:hover {
            background: rgba(126, 69, 2, 1);
        }

    .header-note {
        background: rgba(210, 199, 199, 1);
    }
</style>
