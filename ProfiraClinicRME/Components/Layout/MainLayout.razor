@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Components.Sections
@using Microsoft.EntityFrameworkCore
@using ProfiraClinic.Models.Core
@using ProfiraClinicRME.Application
@using ProfiraClinicRME.Helpers
@using ProfiraClinicRME.Model
@using ProfiraClinicRME.Services
@using ProfiraClinicRME.Utils

@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject INavigationRedirector Redirector
@inject ITokenProvider TokenProvider
@inject IUserService SvcUser
@inject NavigationManager Nav;
@inject ProtectedSessionStorage ProtectedSessionStore
@inject ISessionManager SesMan

@if (SesMan.NeedLoadState)
{
    <h1>Loading ...</h1>
    return;
}

<MudThemeProvider @rendermode="InteractiveServer" Theme="MyCustomTheme" />
<MudPopoverProvider @rendermode="InteractiveServer" />
<MudDialogProvider @rendermode="InteractiveServer" />
<MudSnackbarProvider @rendermode="InteractiveServer" />

<MudLayout Class="bg-wave-fixed doctor" >
    @* Top navbar *@


    <MudAppBar Style="background: rgba(1, 73, 191, 1); z-index: 1000;" Elevation="0" Fixed="true">
        @* <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" /> *@
        <MudLink Href="/" Class="d-flex justify-content-center gap-2 text-decoration-none">
            <MudImage Src="images/logo-white.png" Alt="Profira" Class="" Height="85" Style="filter: brightness(0) invert(1);" />
        </MudLink>
        @* <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Dark" Edge="Edge.Start" OnClick="@DrawerToggle" /> *@
        @* <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" /> *@
        <div class="pa-4">
            <SectionOutlet SectionId="TitleBlock" />
        </div>
        <MudSpacer></MudSpacer>
        <div class="d-flex flex-column align-items-end">
            <div class="d-flex justify-content-center align-items-center">
                <MudBadge Content="3" Overlap="true" Class="mr-8" Color="MudBlazor.Color.Secondary">
                    <MudIcon Icon="@Icons.Material.Filled.Notifications" Style="color: #fff;" />
                </MudBadge>
                <div class="mr-8">
                    <MudIcon Icon="@Icons.Material.Filled.Search" Style="color: #fff;" />
                </div>
                    
                <div class="d-flex align-items-center gap-2" onclick="@ToggleProfilePopover">
                    <MudText Typo="Typo.body2">@_user?.UserName</MudText>
                    <MudAvatar>
                        <MudImage Src="images/avatar1.jpeg" Alt="An image of the best dog ever!"></MudImage>
                    </MudAvatar>
                    <MudPopover Open="@_isProfilePopoverOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                        <div class="d-flex flex-column pa-1">
                            <MudList T="string" Clickable="true">
                                <MudListItem Text="Profile" Icon="@Icons.Material.Filled.Person" />
                                <MudListItem Text="Settings" Icon="@Icons.Material.Filled.Settings" />
                                <MudListItem Text="Activity Log" Icon="@Icons.Material.Filled.FormatListBulleted" />
                                <MudDivider />
                                <MudListItem Text="Logout" Icon="@Icons.Material.Filled.Logout" OnClick="OpenDialog" />
                            </MudList>
                        </div>
                    </MudPopover>
                </div>
            </div>
            <SectionOutlet SectionId="TopbarButtonBlock" />

                
        </div>
    </MudAppBar>



    <MudMainContent Class="h-100">
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="h-100 px-2 pb-4">
            @if(SesMan.IsAuthenticated())
            {
                <CascadingValue Name="CurrentUser" Value="_user">
                    <CascadingValue Name="CurrentAppointment" Value="_appointment">
                        @Body
                    </CascadingValue>
                </CascadingValue>
            } 
        </MudContainer>
    </MudMainContent>
</MudLayout>



@code {
    public static SectionOutlet TitleBlock = new();
    public static SectionOutlet TopbarButtonBlock = new();

    bool _drawerOpen = true;

    string path = "";

    Karyawan Kary;

    private CurrentUser? _user;

    private TRMAppointment? _appointment;

    public string Search { get; set; }

    public string Title { get; set; } = "Dashboard";

    public string Route { get; set; } = "Dashboard";

    public string BackRoute { get; set; } = "#";

    public bool ShowSave { get; set; } = false;

    public bool ShowBack { get; set; } = true;


    public string PasienName { get; set; } = "";

    public string PasienUsia { get; set; } = "";

    private string LayoutCss =>
    $"bg-wave-fixed wave-blue";

    MudTheme MyCustomTheme = new MudTheme()
        {
            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new[] { "Poppins", "Helvetica", "Arial", "sans-serif" }
                }
            }
        };

    private string _classPath = "App::Page::MainLayout";

    public bool _isProfilePopoverOpen = false;

    public void ToggleProfilePopover()
    {
        _isProfilePopoverOpen = !_isProfilePopoverOpen;
    }

    protected override void OnInitialized()
    {
        LogTrace.Info("start", path: _classPath);
        // _user = SvcUser.Current;

        LogTrace.Debug("SesMan need load state", SesMan.NeedLoadState, _classPath);
        if (SesMan.NeedLoadState) return;



        LogTrace.Info("user obtained", _user,  _classPath);
        // if (!SesMan.IsAuthenticated())
        // {
        //     Nav.NavigateTo("/", forceLoad: false);
        // }

        // isDoctor = Nav.ToBaseRelativePath(Nav.Uri).StartsWith("dokter");
        path = Nav.Uri.Substring(Nav.BaseUri.Length);



        // Nav.LocationChanged += _onLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        LogTrace.Info("start", path: _classPath);

        // if (SesMan.needDataFetch) return;

    }

    protected override void OnParametersSet()
    {

        var relativePath = Nav.ToBaseRelativePath(Nav.Uri);
        LogTrace.Info($"start: path {relativePath}", path: _classPath);
        
        if (SesMan.NeedLoadState) return;
        _user = SesMan.GetCurrentUser();
        _appointment = SesMan.GetCurrentAppointment();
        LogTrace.Debug("cur appo:", _appointment, _classPath);

    }

    protected override async Task OnParametersSetAsync()
    {
        LogTrace.Debug("start", path: _classPath);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        LogTrace.Debug("start", new { firstRender }, path: _classPath);

        // if (Redirector.ShouldRedirect && Redirector.TargetUrl != null)
        // {
        //     Redirector.ShouldRedirect = false;    reset flag
        //     var url = Redirector.TargetUrl;
        //     Redirector.TargetUrl = null;

        //     Nav.NavigateTo(url, forceLoad: true);
        // }
        if (firstRender)
        {
            if(SesMan.NeedLoadState) await SesMan.LoadState();
            if(!SesMan.IsAuthenticated())
            {
                Nav.NavigateTo("/", forceLoad: true);
            }

            LogTrace.Info("load user data", path: _classPath);
            _user = SesMan.GetCurrentUser();
            _appointment = SesMan.GetCurrentAppointment();
            StateHasChanged();
            LogTrace.Debug("after first render", path: _classPath);
        }
    }

    // Reset some variables on route change
    private void _onLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        ShowSave = false;
        // PasienName = "";
        // PasienUsia = "";
        
        LogTrace.Info("going to", e.Location , path: _classPath);
        StateHasChanged();
    }

    public void Dispose() => Nav.LocationChanged -= _onLocationChanged;

    private void OpenDialog()
    {
        DialogService.Show<ProfiraClinicRME.Components.Dialog.LogOutDialog>("Log Out");
    }
}

