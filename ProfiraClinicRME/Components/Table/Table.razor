@using ProfiraClinicRME.Utils;
@using System.Linq;
@using static MudBlazor.CategoryTypes

@if (WithAdd == true) {
    <div class="d-flex justify-content-end mb-2">
        <MudButton Size="MudBlazor.Size.Small" StartIcon="fa fa-plus" IconSize="@MudBlazor.Size.Small" Href="@Config.GetAddRoute()" Class="add-btn mt-2">@AddButtonText</MudButton>
    </div>
}
@if (WithFilter)
{

    <div class="mb-5">
        <MudCard Class="rounded-lg">
            <MudStack Spacing="1" Class="w-100 table-header pb-4">
                <MudButton OnClick="OnExpandCollapseClick" FullWidth="true" Class="w-100 filter-btn">Filter <MudIcon Icon="@(_expanded ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Title="Arrow" /> </MudButton>
                <MudCollapse Expanded="_expanded" Class="px-4">
                    <div class="d-flex justify-content-start align-items-start gap-4">
                        <MudSelect ShrinkLabel MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" SelectAll @bind-Value="value" @bind-SelectedValues="options" OuterClass="flex-grow-0" MultiSelection T="string" Style="border-radius: 20px; background-color: #FFF; max-width: 300px; min-width: 200px;" Label="Filter by" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense"  Class="mt-4 filter-field flex-shrink-1 flex-grow-0">
                            @foreach (TableColumn col in Config.GetColumn())
                            {
                                @if(col.Type == ColumnType.Data) {
                                    <MudSelectItem Style="height: 30px" T="string" Value="@col.DataField">@col.Caption</MudSelectItem>
                                }
                            }
                        </MudSelect>
                        <MudTextField ShrinkLabel Style="border-radius: 20px; background-color: #FFF; max-width: 400px; min-width: 300px;" Margin="Margin.Dense"  Variant="Variant.Outlined" @ref="tableFilterRef" @bind-Value="searchString1" Class="mt-4 filter-field flex-shrink-1 flex-grow-0" Clearable Immediate></MudTextField>
                    </div>
                    @* <div class="d-flex justify-content-between mb-4"> *@
                    @*     <MudButton Size="MudBlazor.Size.Small" StartIcon="fa fa-search" IconSize="@MudBlazor.Size.Small" Class="search-btn mt-2" OnClick="() => tableFilterRef.ForceUpdate()">Cari</MudButton> *@
                    @*     @* <MudButton StartIcon="fa fa-plus" IconSize="@MudBlazor.Size.Small" Href="@Config.GetAddRoute()" Class="add-btn mt-2">Tambah</MudButton> *@
                    @* </div> *@
                </MudCollapse>
            </MudStack>
        </MudCard>
    </div>
}
<MudTable 
    HeaderClass="@GetHeaderClass()" 
    Striped 
    Bordered 
    RowsPerPage="@_rowPerPage"
    Items="@Config.GetData()" 
    Dense  
    Breakpoint="Breakpoint.Sm" 
    Loading="@_loading" 
    LoadingProgressColor="MudBlazor.Color.Info" 
    Filter="new Func<Dictionary<string, string>,bool>(FilterFunc1)" @ref="table">
    <ColGroup>
        @foreach (TableColumn col in Config.GetColumn())
        {
            // Pass the Dto properties to the component
            @switch (col.Type)
            {
                case ColumnType.Data:
                    <col />
                    break;
                case ColumnType.Edit:
                case ColumnType.View:
                case ColumnType.Delete:
                    <col style="width:50px;" />
                    break;
                case null:
                    <col />
                    break;
            }
        }
    </ColGroup>
    <HeaderContent>
        @foreach (TableColumn col in Config.GetColumn())
        {
            // Pass the Dto properties to the component
            <MudTh Class="fw-bold border-header-table">@col.Caption</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        @foreach (TableColumn col in Config.GetColumn())
        {
            @* Use CSS classes for cell alignment since MudTd doesn’t support Align param *@
            var cellClass = col.Align switch
            {
                ColumnAlign.Right => "text-end",
                ColumnAlign.Center => "text-center",
                _ => ""
            };
            <MudTd DataLabel="@col.Caption" Class="@cellClass">
                @switch (col.Type)
                {
                    case ColumnType.Data:
                        @context.GetValueOrDefault(col.DataField)
                        break;
                    case ColumnType.Edit:
                        <MudFab DisableElevation Size="MudBlazor.Size.Small" IconSize="MudBlazor.Size.Small" Color="@(col.Color ?? MudBlazor.Color.Transparent)" Style="color: rgba(111, 74, 2, 1); background-color: transparent; height: 20px !important; min-height: 20px;" DropShadow="false" StartIcon="@(col.CustomIcon ?? Icons.Material.Filled.Edit)" Href="@context.GetValueOrDefault(col.DataField)" />
                        break;
                    case ColumnType.View:
                        var s = "fsef";
                        <MudFab DisableElevation Size="MudBlazor.Size.Small" IconSize="MudBlazor.Size.Small" Color="@(col.Color ?? MudBlazor.Color.Transparent)" Style="color: rgba(111, 74, 2, 1); background-color: transparent; height: 20px !important; min-height: 20px;" DropShadow="false" StartIcon="@(col.CustomIcon ?? Icons.Material.Filled.RemoveRedEye)"
                        OnClick="@(() => col.Action.Invoke(context))"
                        />
                        break;

                    case ColumnType.Delete:
                        <MudFab DisableElevation Size="MudBlazor.Size.Small" IconSize="MudBlazor.Size.Small" Color="@(col.Color ?? MudBlazor.Color.Transparent)" Style="color: #f00; background-color: transparent; height: 20px !important; min-height: 20px;" DropShadow="false" StartIcon="@(col.CustomIcon ?? Icons.Material.Filled.DeleteForever)" OnClick="@(() => col.Action.Invoke(context))" />
                        break;
                    default:
                        @context.GetValueOrDefault(col.DataField)
                        break;
                }
            </MudTd>
        }
    </RowTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5, 10, 15, 25, 50, 100, int.MaxValue }" InfoFormat="@infoFormat" HorizontalAlignment="MudBlazor.HorizontalAlignment.Center" />
    </PagerContent>
    
</MudTable>

@code {
    private bool _loading;
    private string infoFormat = "Showing {first_item} to {last_item} of {all_items}";

    private string _classPath = "Widget::Table";

    private int _rowPerPage = 10;
    
    private string searchString1 = "";

    private MudTable<Dictionary<string, string>> table;
    private MudTextField<string> tableFilterRef;

    bool _expanded = true;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    private IEnumerable<string> options { get; set; } = [];

    private string value { get; set; } = "Nothing selected";

    [Parameter]
    public TableConfig Config { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());
    [Parameter]
    public string? ClassOverride { get; set; }

    [Parameter]
    public bool WithAdd { get; set; } = true;

    [Parameter]
    public bool WithFilter { get; set; } = true;

    [Parameter]
    public bool WithPaging { 
        get => _rowPerPage < 10000;
        set => _rowPerPage = value ? 10 : 10000;
    }

    [Parameter]
    public string? AddButtonText { get; set; } = "Tambah";

    private bool FilterFunc1(Dictionary<string, string> element) => FilterFunc(element, searchString1.ToLower().Trim());

    string GetHeaderClass()
    {
        var defaultClass = "table-head-bordered bg-pastel-sky" + (ClassOverride ?? "");
        return defaultClass;
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        Config.ReplaceFilter(selectedValues);

        var count = selectedValues.Count;

        return $"{string.Join(", ", selectedValues.Select(x => x))}" + (count <= 1 ? "   " : "");
    }

    private bool FilterFunc(Dictionary<string, string> element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        System.Diagnostics.Debug.Print(element.Values.ToList()[2]);

        var filters = Config.GetFilters();
        foreach (var filter in filters)
        {
            foreach (var item in element)
            {
                if (filter != null && filter.Column != item.Key)
                {
                    continue;
                }
                if (item.Value.ToLower().Contains(searchString))
                {
                    return true;
                }
            }
        }

        return false;
    }

    
    protected override void OnParametersSet()
    {
    //_entPropChanged = false;
    LogTrace.Info("trace", path: _classPath);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var columns = Config.GetColumn().Select(p => p.DataField);
            options = Config.GetColumn()
                .Select(p => p.DataField)
                .ToHashSet();
            StateHasChanged();
        }
        LogTrace.Info("fin", firstRender, _classPath);
    }
}


<style>
    .bg-blue {
        background-color: rgba(1, 73, 191, 1);
    }

    .bg-lightblue {
        background-color: rgba(192, 225, 255, 1);
    }

    .mud-table-toolbar {
        overflow: auto !important;
        height: max-content;
        padding: 0px;
    }

    .filter-btn {
        background: rgba(162, 238, 240, 0.4);
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
    }

    .filter-btn > .mud-button-label {
        text-align: left;
        justify-content: start;
        padding-left: 10px;
    }

    .search-btn {
        background: rgba(59, 113, 251, 1);
        color: white;
        text-transform: none;
    }

    .search-btn:hover {
        background: rgba(39, 83, 201, 1);
    }

    .add-btn {
        background: rgba(47, 193, 71, 1);
        color: white;
        margin-top: -12px !important;
        text-transform: none;
    }

    .add-btn:hover {
        background: rgba(27, 153, 41, 1);
    }

    .mud-table {

    }

    .table-header .mud-input-root {
        height: 30px !important;
        padding: 0px 10px !important;
        font-size: 12px !important;
    }

    .table-header .mud-input-label {
        font-size: 14px !important;
        line-height: 14px !important;
    }

    .table-header .mud-input-label-filled.mud-input-label-margin-dense {
        transform: translate(12px, 20px) scale(1);
    }

    .table-header .mud-input-label-inputcontrol {
        top: -3px;
    }

    .filter-field .mud-input-outlined-border {
        border-radius: 20px !important;
    }
</style>
